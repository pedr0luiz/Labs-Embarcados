
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402b0c  00402b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000454  20400000  00402b14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002c4  20400454  00402f68  00020454  2**2
                  ALLOC
  4 .stack        00002000  20400718  0040322c  00020454  2**0
                  ALLOC
  5 .heap         00000200  20402718  0040522c  00020454  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020482  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001a6fa  00000000  00000000  000204db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003bd9  00000000  00000000  0003abd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000067cc  00000000  00000000  0003e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a00  00000000  00000000  00044f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a88  00000000  00000000  0004597a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ac81  00000000  00000000  00046402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010714  00000000  00000000  00051083  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009002b  00000000  00000000  00061797  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001868  00000000  00000000  000f17c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 27 40 20 99 14 40 00 95 14 40 00 95 14 40 00     .'@ ..@...@...@.
  400010:	95 14 40 00 95 14 40 00 95 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	95 14 40 00 95 14 40 00 00 00 00 00 95 14 40 00     ..@...@.......@.
  40003c:	95 14 40 00 95 14 40 00 95 14 40 00 09 19 40 00     ..@...@...@...@.
  40004c:	41 18 40 00 95 14 40 00 95 14 40 00 95 14 40 00     A.@...@...@...@.
  40005c:	95 14 40 00 95 14 40 00 00 00 00 00 f9 0f 40 00     ..@...@.......@.
  40006c:	0d 10 40 00 21 10 40 00 95 14 40 00 95 14 40 00     ..@.!.@...@...@.
  40007c:	95 14 40 00 35 10 40 00 49 10 40 00 95 14 40 00     ..@.5.@.I.@...@.
  40008c:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  40009c:	19 18 40 00 f1 17 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  4000ac:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  4000bc:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  4000cc:	95 14 40 00 00 00 00 00 95 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  4000ec:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  4000fc:	95 14 40 00 95 14 40 00 95 14 40 00 95 14 40 00     ..@...@...@...@.
  40010c:	95 14 40 00 95 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 95 14 40 00 95 14 40 00 95 14 40 00     ......@...@...@.
  40012c:	95 14 40 00 95 14 40 00 00 00 00 00 95 14 40 00     ..@...@.......@.
  40013c:	95 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400454 	.word	0x20400454
  40015c:	00000000 	.word	0x00000000
  400160:	00402b14 	.word	0x00402b14

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402b14 	.word	0x00402b14
  4001a0:	20400458 	.word	0x20400458
  4001a4:	00402b14 	.word	0x00402b14
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr
	...

004001c8 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4001c8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4001ca:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4001cc:	f014 0f01 	tst.w	r4, #1
  4001d0:	d005      	beq.n	4001de <rtc_set_time+0x16>
  4001d2:	290c      	cmp	r1, #12
  4001d4:	d903      	bls.n	4001de <rtc_set_time+0x16>
			ul_hour -= 12;
  4001d6:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4001d8:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4001dc:	e000      	b.n	4001e0 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4001de:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4001e0:	4c1c      	ldr	r4, [pc, #112]	; (400254 <rtc_set_time+0x8c>)
  4001e2:	fba4 5603 	umull	r5, r6, r4, r3
  4001e6:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4001e8:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4001ec:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4001f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4001f4:	fba4 6502 	umull	r6, r5, r4, r2
  4001f8:	08ed      	lsrs	r5, r5, #3
  4001fa:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4001fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400202:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40020a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40020c:	fba4 4201 	umull	r4, r2, r4, r1
  400210:	08d2      	lsrs	r2, r2, #3
  400212:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400216:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40021a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40021e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400222:	6983      	ldr	r3, [r0, #24]
  400224:	f013 0f04 	tst.w	r3, #4
  400228:	d0fb      	beq.n	400222 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40022a:	6803      	ldr	r3, [r0, #0]
  40022c:	f043 0301 	orr.w	r3, r3, #1
  400230:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400232:	6983      	ldr	r3, [r0, #24]
  400234:	f013 0f01 	tst.w	r3, #1
  400238:	d0fb      	beq.n	400232 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40023a:	2301      	movs	r3, #1
  40023c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40023e:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400240:	6803      	ldr	r3, [r0, #0]
  400242:	f023 0301 	bic.w	r3, r3, #1
  400246:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400248:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40024a:	f000 0001 	and.w	r0, r0, #1
  40024e:	bcf0      	pop	{r4, r5, r6, r7}
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	cccccccd 	.word	0xcccccccd

00400258 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  400258:	b5f0      	push	{r4, r5, r6, r7, lr}
  40025a:	9c05      	ldr	r4, [sp, #20]
  40025c:	9d06      	ldr	r5, [sp, #24]
  40025e:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  400260:	460e      	mov	r6, r1
  400262:	b1b1      	cbz	r1, 400292 <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400264:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  400266:	f011 0f01 	tst.w	r1, #1
  40026a:	d005      	beq.n	400278 <rtc_set_time_alarm+0x20>
  40026c:	2a0c      	cmp	r2, #12
  40026e:	d903      	bls.n	400278 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  400270:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  400272:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  400276:	e000      	b.n	40027a <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  400278:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40027a:	4919      	ldr	r1, [pc, #100]	; (4002e0 <rtc_set_time_alarm+0x88>)
  40027c:	fba1 e102 	umull	lr, r1, r1, r2
  400280:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400282:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  400286:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  40028a:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40028c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  400290:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  400292:	b15b      	cbz	r3, 4002ac <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <rtc_set_time_alarm+0x88>)
  400296:	fba3 2304 	umull	r2, r3, r3, r4
  40029a:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40029c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002a0:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002a4:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002a6:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  4002aa:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  4002ac:	b155      	cbz	r5, 4002c4 <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002ae:	4b0c      	ldr	r3, [pc, #48]	; (4002e0 <rtc_set_time_alarm+0x88>)
  4002b0:	fba3 2307 	umull	r2, r3, r3, r7
  4002b4:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4002b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002ba:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002be:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  4002c2:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4002c4:	6902      	ldr	r2, [r0, #16]
  4002c6:	4b07      	ldr	r3, [pc, #28]	; (4002e4 <rtc_set_time_alarm+0x8c>)
  4002c8:	4013      	ands	r3, r2
  4002ca:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  4002cc:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4002ce:	6902      	ldr	r2, [r0, #16]
  4002d0:	4b05      	ldr	r3, [pc, #20]	; (4002e8 <rtc_set_time_alarm+0x90>)
  4002d2:	4313      	orrs	r3, r2
  4002d4:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  4002d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002d8:	f000 0004 	and.w	r0, r0, #4
  4002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002de:	bf00      	nop
  4002e0:	cccccccd 	.word	0xcccccccd
  4002e4:	ff7f7f7f 	.word	0xff7f7f7f
  4002e8:	00808080 	.word	0x00808080

004002ec <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002ec:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ee:	4d2a      	ldr	r5, [pc, #168]	; (400398 <rtc_set_date+0xac>)
  4002f0:	fba5 4603 	umull	r4, r6, r5, r3
  4002f4:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002f6:	9c03      	ldr	r4, [sp, #12]
  4002f8:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002fa:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002fe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400302:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40030a:	fba5 6402 	umull	r6, r4, r5, r2
  40030e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400310:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400314:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400318:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40031c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400320:	4b1e      	ldr	r3, [pc, #120]	; (40039c <rtc_set_date+0xb0>)
  400322:	fba3 4301 	umull	r4, r3, r3, r1
  400326:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40032c:	4b1c      	ldr	r3, [pc, #112]	; (4003a0 <rtc_set_date+0xb4>)
  40032e:	fba3 4301 	umull	r4, r3, r3, r1
  400332:	095b      	lsrs	r3, r3, #5
  400334:	fba5 6403 	umull	r6, r4, r5, r3
  400338:	08e4      	lsrs	r4, r4, #3
  40033a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40033e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400342:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400344:	fba5 4301 	umull	r4, r3, r5, r1
  400348:	08db      	lsrs	r3, r3, #3
  40034a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40034e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400352:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400356:	fba5 1503 	umull	r1, r5, r5, r3
  40035a:	08ed      	lsrs	r5, r5, #3
  40035c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400360:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400364:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400368:	6983      	ldr	r3, [r0, #24]
  40036a:	f013 0f04 	tst.w	r3, #4
  40036e:	d0fb      	beq.n	400368 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400370:	6803      	ldr	r3, [r0, #0]
  400372:	f043 0302 	orr.w	r3, r3, #2
  400376:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400378:	6983      	ldr	r3, [r0, #24]
  40037a:	f013 0f01 	tst.w	r3, #1
  40037e:	d0fb      	beq.n	400378 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400380:	2301      	movs	r3, #1
  400382:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400384:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400386:	6803      	ldr	r3, [r0, #0]
  400388:	f023 0302 	bic.w	r3, r3, #2
  40038c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40038e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400390:	f000 0002 	and.w	r0, r0, #2
  400394:	bc70      	pop	{r4, r5, r6}
  400396:	4770      	bx	lr
  400398:	cccccccd 	.word	0xcccccccd
  40039c:	10624dd3 	.word	0x10624dd3
  4003a0:	51eb851f 	.word	0x51eb851f

004003a4 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4003a4:	b430      	push	{r4, r5}
  4003a6:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  4003a8:	460c      	mov	r4, r1
  4003aa:	b151      	cbz	r1, 4003c2 <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003ac:	4c12      	ldr	r4, [pc, #72]	; (4003f8 <rtc_set_date_alarm+0x54>)
  4003ae:	fba4 1402 	umull	r1, r4, r4, r2
  4003b2:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003b4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  4003b8:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  4003bc:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003be:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  4003c2:	b15b      	cbz	r3, 4003dc <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c4:	4a0c      	ldr	r2, [pc, #48]	; (4003f8 <rtc_set_date_alarm+0x54>)
  4003c6:	fba2 3205 	umull	r3, r2, r2, r5
  4003ca:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003cc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4003d0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4003d4:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4003da:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4003dc:	6942      	ldr	r2, [r0, #20]
  4003de:	4b07      	ldr	r3, [pc, #28]	; (4003fc <rtc_set_date_alarm+0x58>)
  4003e0:	4013      	ands	r3, r2
  4003e2:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4003e4:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4003e6:	6942      	ldr	r2, [r0, #20]
  4003e8:	4b05      	ldr	r3, [pc, #20]	; (400400 <rtc_set_date_alarm+0x5c>)
  4003ea:	4313      	orrs	r3, r2
  4003ec:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4003ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003f0:	f000 0008 	and.w	r0, r0, #8
  4003f4:	bc30      	pop	{r4, r5}
  4003f6:	4770      	bx	lr
  4003f8:	cccccccd 	.word	0xcccccccd
  4003fc:	7f7fffff 	.word	0x7f7fffff
  400400:	80800000 	.word	0x80800000

00400404 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400404:	6980      	ldr	r0, [r0, #24]
}
  400406:	4770      	bx	lr

00400408 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400408:	61c1      	str	r1, [r0, #28]
  40040a:	4770      	bx	lr

0040040c <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  40040c:	4b03      	ldr	r3, [pc, #12]	; (40041c <rtt_init+0x10>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400414:	4319      	orrs	r1, r3
  400416:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400418:	2000      	movs	r0, #0
  40041a:	4770      	bx	lr
  40041c:	20400470 	.word	0x20400470

00400420 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400420:	b941      	cbnz	r1, 400434 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400422:	4a09      	ldr	r2, [pc, #36]	; (400448 <rtt_sel_source+0x28>)
  400424:	6813      	ldr	r3, [r2, #0]
  400426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40042a:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40042c:	6802      	ldr	r2, [r0, #0]
  40042e:	4313      	orrs	r3, r2
  400430:	6003      	str	r3, [r0, #0]
  400432:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400434:	4a04      	ldr	r2, [pc, #16]	; (400448 <rtt_sel_source+0x28>)
  400436:	6813      	ldr	r3, [r2, #0]
  400438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40043c:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40043e:	6802      	ldr	r2, [r0, #0]
  400440:	4313      	orrs	r3, r2
  400442:	6003      	str	r3, [r0, #0]
  400444:	4770      	bx	lr
  400446:	bf00      	nop
  400448:	20400470 	.word	0x20400470

0040044c <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40044c:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <rtt_enable_interrupt+0x10>)
  400450:	681b      	ldr	r3, [r3, #0]
  400452:	4319      	orrs	r1, r3
  400454:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400456:	6001      	str	r1, [r0, #0]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	20400470 	.word	0x20400470

00400460 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400460:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400462:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <rtt_disable_interrupt+0x10>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40046c:	6001      	str	r1, [r0, #0]
  40046e:	4770      	bx	lr
  400470:	20400470 	.word	0x20400470

00400474 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400474:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400476:	6883      	ldr	r3, [r0, #8]
  400478:	429a      	cmp	r2, r3
  40047a:	d003      	beq.n	400484 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40047c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40047e:	6883      	ldr	r3, [r0, #8]
  400480:	4293      	cmp	r3, r2
  400482:	d1fb      	bne.n	40047c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400484:	4618      	mov	r0, r3
  400486:	4770      	bx	lr

00400488 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400488:	68c0      	ldr	r0, [r0, #12]
}
  40048a:	4770      	bx	lr

0040048c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40048c:	b570      	push	{r4, r5, r6, lr}
  40048e:	4606      	mov	r6, r0
  400490:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400492:	6804      	ldr	r4, [r0, #0]
  400494:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400498:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40049c:	4809      	ldr	r0, [pc, #36]	; (4004c4 <rtt_write_alarm_time+0x38>)
  40049e:	4b0a      	ldr	r3, [pc, #40]	; (4004c8 <rtt_write_alarm_time+0x3c>)
  4004a0:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4004a2:	b92d      	cbnz	r5, 4004b0 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4004a4:	f04f 33ff 	mov.w	r3, #4294967295
  4004a8:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  4004aa:	b924      	cbnz	r4, 4004b6 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  4004ac:	2000      	movs	r0, #0
  4004ae:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  4004b0:	3d01      	subs	r5, #1
  4004b2:	6075      	str	r5, [r6, #4]
  4004b4:	e7f9      	b.n	4004aa <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4004b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004ba:	4802      	ldr	r0, [pc, #8]	; (4004c4 <rtt_write_alarm_time+0x38>)
  4004bc:	4b03      	ldr	r3, [pc, #12]	; (4004cc <rtt_write_alarm_time+0x40>)
  4004be:	4798      	blx	r3
  4004c0:	e7f4      	b.n	4004ac <rtt_write_alarm_time+0x20>
  4004c2:	bf00      	nop
  4004c4:	400e1830 	.word	0x400e1830
  4004c8:	00400461 	.word	0x00400461
  4004cc:	0040044d 	.word	0x0040044d

004004d0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4004d0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4004d2:	4b07      	ldr	r3, [pc, #28]	; (4004f0 <spi_enable_clock+0x20>)
  4004d4:	4298      	cmp	r0, r3
  4004d6:	d003      	beq.n	4004e0 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4004d8:	4b06      	ldr	r3, [pc, #24]	; (4004f4 <spi_enable_clock+0x24>)
  4004da:	4298      	cmp	r0, r3
  4004dc:	d004      	beq.n	4004e8 <spi_enable_clock+0x18>
  4004de:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004e0:	2015      	movs	r0, #21
  4004e2:	4b05      	ldr	r3, [pc, #20]	; (4004f8 <spi_enable_clock+0x28>)
  4004e4:	4798      	blx	r3
  4004e6:	bd08      	pop	{r3, pc}
  4004e8:	202a      	movs	r0, #42	; 0x2a
  4004ea:	4b03      	ldr	r3, [pc, #12]	; (4004f8 <spi_enable_clock+0x28>)
  4004ec:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4004ee:	e7f6      	b.n	4004de <spi_enable_clock+0xe>
  4004f0:	40008000 	.word	0x40008000
  4004f4:	40058000 	.word	0x40058000
  4004f8:	0040117d 	.word	0x0040117d

004004fc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4004fc:	6843      	ldr	r3, [r0, #4]
  4004fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400502:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400504:	6843      	ldr	r3, [r0, #4]
  400506:	0409      	lsls	r1, r1, #16
  400508:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40050c:	4319      	orrs	r1, r3
  40050e:	6041      	str	r1, [r0, #4]
  400510:	4770      	bx	lr

00400512 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400512:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400514:	f643 2499 	movw	r4, #15001	; 0x3a99
  400518:	6905      	ldr	r5, [r0, #16]
  40051a:	f015 0f02 	tst.w	r5, #2
  40051e:	d103      	bne.n	400528 <spi_write+0x16>
		if (!timeout--) {
  400520:	3c01      	subs	r4, #1
  400522:	d1f9      	bne.n	400518 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400524:	2001      	movs	r0, #1
  400526:	e00c      	b.n	400542 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400528:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40052a:	f014 0f02 	tst.w	r4, #2
  40052e:	d006      	beq.n	40053e <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400530:	0412      	lsls	r2, r2, #16
  400532:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400536:	4311      	orrs	r1, r2
		if (uc_last) {
  400538:	b10b      	cbz	r3, 40053e <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40053a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40053e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400540:	2000      	movs	r0, #0
}
  400542:	bc30      	pop	{r4, r5}
  400544:	4770      	bx	lr

00400546 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400546:	b932      	cbnz	r2, 400556 <spi_set_clock_polarity+0x10>
  400548:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40054c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40054e:	f023 0301 	bic.w	r3, r3, #1
  400552:	6303      	str	r3, [r0, #48]	; 0x30
  400554:	4770      	bx	lr
  400556:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40055a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40055c:	f043 0301 	orr.w	r3, r3, #1
  400560:	6303      	str	r3, [r0, #48]	; 0x30
  400562:	4770      	bx	lr

00400564 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400564:	b932      	cbnz	r2, 400574 <spi_set_clock_phase+0x10>
  400566:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40056a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40056c:	f023 0302 	bic.w	r3, r3, #2
  400570:	6303      	str	r3, [r0, #48]	; 0x30
  400572:	4770      	bx	lr
  400574:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400578:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40057a:	f043 0302 	orr.w	r3, r3, #2
  40057e:	6303      	str	r3, [r0, #48]	; 0x30
  400580:	4770      	bx	lr

00400582 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400582:	2a04      	cmp	r2, #4
  400584:	d003      	beq.n	40058e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400586:	b16a      	cbz	r2, 4005a4 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400588:	2a08      	cmp	r2, #8
  40058a:	d016      	beq.n	4005ba <spi_configure_cs_behavior+0x38>
  40058c:	4770      	bx	lr
  40058e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400592:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400594:	f023 0308 	bic.w	r3, r3, #8
  400598:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40059a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40059c:	f043 0304 	orr.w	r3, r3, #4
  4005a0:	6303      	str	r3, [r0, #48]	; 0x30
  4005a2:	4770      	bx	lr
  4005a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4005a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005aa:	f023 0308 	bic.w	r3, r3, #8
  4005ae:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4005b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005b2:	f023 0304 	bic.w	r3, r3, #4
  4005b6:	6303      	str	r3, [r0, #48]	; 0x30
  4005b8:	4770      	bx	lr
  4005ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005c0:	f043 0308 	orr.w	r3, r3, #8
  4005c4:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4005c6:	e7e1      	b.n	40058c <spi_configure_cs_behavior+0xa>

004005c8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4005d2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005d6:	431a      	orrs	r2, r3
  4005d8:	630a      	str	r2, [r1, #48]	; 0x30
  4005da:	4770      	bx	lr

004005dc <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4005dc:	1e43      	subs	r3, r0, #1
  4005de:	4419      	add	r1, r3
  4005e0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4005e4:	1e43      	subs	r3, r0, #1
  4005e6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4005e8:	bf94      	ite	ls
  4005ea:	b200      	sxthls	r0, r0
		return -1;
  4005ec:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4005f0:	4770      	bx	lr

004005f2 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4005f2:	b17a      	cbz	r2, 400614 <spi_set_baudrate_div+0x22>
{
  4005f4:	b410      	push	{r4}
  4005f6:	4614      	mov	r4, r2
  4005f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4005fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400602:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400604:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400606:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40060a:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40060c:	2000      	movs	r0, #0
}
  40060e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400612:	4770      	bx	lr
        return -1;
  400614:	f04f 30ff 	mov.w	r0, #4294967295
  400618:	4770      	bx	lr

0040061a <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40061a:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40061c:	0189      	lsls	r1, r1, #6
  40061e:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400620:	2402      	movs	r4, #2
  400622:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400624:	f04f 31ff 	mov.w	r1, #4294967295
  400628:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40062a:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40062c:	605a      	str	r2, [r3, #4]
}
  40062e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400632:	4770      	bx	lr

00400634 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400634:	0189      	lsls	r1, r1, #6
  400636:	2305      	movs	r3, #5
  400638:	5043      	str	r3, [r0, r1]
  40063a:	4770      	bx	lr

0040063c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40063c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400640:	61ca      	str	r2, [r1, #28]
  400642:	4770      	bx	lr

00400644 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400644:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400648:	624a      	str	r2, [r1, #36]	; 0x24
  40064a:	4770      	bx	lr

0040064c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40064c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400650:	6a08      	ldr	r0, [r1, #32]
}
  400652:	4770      	bx	lr

00400654 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400654:	b4f0      	push	{r4, r5, r6, r7}
  400656:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400658:	2402      	movs	r4, #2
  40065a:	9401      	str	r4, [sp, #4]
  40065c:	2408      	movs	r4, #8
  40065e:	9402      	str	r4, [sp, #8]
  400660:	2420      	movs	r4, #32
  400662:	9403      	str	r4, [sp, #12]
  400664:	2480      	movs	r4, #128	; 0x80
  400666:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400668:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40066a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40066c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40066e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400672:	d814      	bhi.n	40069e <tc_find_mck_divisor+0x4a>
  400674:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400676:	42a0      	cmp	r0, r4
  400678:	d217      	bcs.n	4006aa <tc_find_mck_divisor+0x56>
  40067a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40067c:	af01      	add	r7, sp, #4
  40067e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400682:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400686:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400688:	4284      	cmp	r4, r0
  40068a:	d30a      	bcc.n	4006a2 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40068c:	4286      	cmp	r6, r0
  40068e:	d90d      	bls.n	4006ac <tc_find_mck_divisor+0x58>
			ul_index++) {
  400690:	3501      	adds	r5, #1
	for (ul_index = 0;
  400692:	2d05      	cmp	r5, #5
  400694:	d1f3      	bne.n	40067e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400696:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400698:	b006      	add	sp, #24
  40069a:	bcf0      	pop	{r4, r5, r6, r7}
  40069c:	4770      	bx	lr
			return 0;
  40069e:	2000      	movs	r0, #0
  4006a0:	e7fa      	b.n	400698 <tc_find_mck_divisor+0x44>
  4006a2:	2000      	movs	r0, #0
  4006a4:	e7f8      	b.n	400698 <tc_find_mck_divisor+0x44>
	return 1;
  4006a6:	2001      	movs	r0, #1
  4006a8:	e7f6      	b.n	400698 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4006aa:	2500      	movs	r5, #0
	if (p_uldiv) {
  4006ac:	b12a      	cbz	r2, 4006ba <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4006ae:	a906      	add	r1, sp, #24
  4006b0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006b4:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006b8:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d0f3      	beq.n	4006a6 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4006be:	601d      	str	r5, [r3, #0]
	return 1;
  4006c0:	2001      	movs	r0, #1
  4006c2:	e7e9      	b.n	400698 <tc_find_mck_divisor+0x44>

004006c4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4006c4:	4b01      	ldr	r3, [pc, #4]	; (4006cc <gfx_mono_set_framebuffer+0x8>)
  4006c6:	6018      	str	r0, [r3, #0]
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop
  4006cc:	20400474 	.word	0x20400474

004006d0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006d0:	4b02      	ldr	r3, [pc, #8]	; (4006dc <gfx_mono_framebuffer_put_byte+0xc>)
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4006d8:	5442      	strb	r2, [r0, r1]
  4006da:	4770      	bx	lr
  4006dc:	20400474 	.word	0x20400474

004006e0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <gfx_mono_framebuffer_get_byte+0xc>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4006e8:	5c40      	ldrb	r0, [r0, r1]
  4006ea:	4770      	bx	lr
  4006ec:	20400474 	.word	0x20400474

004006f0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4006f4:	1884      	adds	r4, r0, r2
  4006f6:	2c80      	cmp	r4, #128	; 0x80
  4006f8:	dd02      	ble.n	400700 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4006fa:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4006fe:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400700:	b322      	cbz	r2, 40074c <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400702:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400704:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400708:	2601      	movs	r6, #1
  40070a:	fa06 f101 	lsl.w	r1, r6, r1
  40070e:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400710:	2b01      	cmp	r3, #1
  400712:	d01d      	beq.n	400750 <gfx_mono_generic_draw_horizontal_line+0x60>
  400714:	2b00      	cmp	r3, #0
  400716:	d035      	beq.n	400784 <gfx_mono_generic_draw_horizontal_line+0x94>
  400718:	2b02      	cmp	r3, #2
  40071a:	d117      	bne.n	40074c <gfx_mono_generic_draw_horizontal_line+0x5c>
  40071c:	3801      	subs	r0, #1
  40071e:	b2c7      	uxtb	r7, r0
  400720:	19d4      	adds	r4, r2, r7
  400722:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400724:	f8df a090 	ldr.w	sl, [pc, #144]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400728:	f04f 0900 	mov.w	r9, #0
  40072c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400730:	4621      	mov	r1, r4
  400732:	4628      	mov	r0, r5
  400734:	47d0      	blx	sl
			temp ^= pixelmask;
  400736:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40073a:	464b      	mov	r3, r9
  40073c:	b2d2      	uxtb	r2, r2
  40073e:	4621      	mov	r1, r4
  400740:	4628      	mov	r0, r5
  400742:	47c0      	blx	r8
  400744:	3c01      	subs	r4, #1
  400746:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400748:	42bc      	cmp	r4, r7
  40074a:	d1f1      	bne.n	400730 <gfx_mono_generic_draw_horizontal_line+0x40>
  40074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400750:	3801      	subs	r0, #1
  400752:	b2c7      	uxtb	r7, r0
  400754:	19d4      	adds	r4, r2, r7
  400756:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400758:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  40075c:	f04f 0900 	mov.w	r9, #0
  400760:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400764:	4621      	mov	r1, r4
  400766:	4628      	mov	r0, r5
  400768:	47d0      	blx	sl
			temp |= pixelmask;
  40076a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40076e:	464b      	mov	r3, r9
  400770:	b2d2      	uxtb	r2, r2
  400772:	4621      	mov	r1, r4
  400774:	4628      	mov	r0, r5
  400776:	47c0      	blx	r8
  400778:	3c01      	subs	r4, #1
  40077a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40077c:	42bc      	cmp	r4, r7
  40077e:	d1f1      	bne.n	400764 <gfx_mono_generic_draw_horizontal_line+0x74>
  400780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400784:	3801      	subs	r0, #1
  400786:	b2c7      	uxtb	r7, r0
  400788:	19d4      	adds	r4, r2, r7
  40078a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40078c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400790:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400792:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400796:	4621      	mov	r1, r4
  400798:	4628      	mov	r0, r5
  40079a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40079c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007a0:	2300      	movs	r3, #0
  4007a2:	b2d2      	uxtb	r2, r2
  4007a4:	4621      	mov	r1, r4
  4007a6:	4628      	mov	r0, r5
  4007a8:	47c8      	blx	r9
  4007aa:	3c01      	subs	r4, #1
  4007ac:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007ae:	42bc      	cmp	r4, r7
  4007b0:	d1f1      	bne.n	400796 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007b6:	bf00      	nop
  4007b8:	004009f1 	.word	0x004009f1
  4007bc:	004008ed 	.word	0x004008ed

004007c0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4007c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4007c4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4007c8:	b18b      	cbz	r3, 4007ee <gfx_mono_generic_draw_filled_rect+0x2e>
  4007ca:	461c      	mov	r4, r3
  4007cc:	4690      	mov	r8, r2
  4007ce:	4606      	mov	r6, r0
  4007d0:	1e4d      	subs	r5, r1, #1
  4007d2:	b2ed      	uxtb	r5, r5
  4007d4:	442c      	add	r4, r5
  4007d6:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4007d8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4007f4 <gfx_mono_generic_draw_filled_rect+0x34>
  4007dc:	463b      	mov	r3, r7
  4007de:	4642      	mov	r2, r8
  4007e0:	4621      	mov	r1, r4
  4007e2:	4630      	mov	r0, r6
  4007e4:	47c8      	blx	r9
  4007e6:	3c01      	subs	r4, #1
  4007e8:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4007ea:	42ac      	cmp	r4, r5
  4007ec:	d1f6      	bne.n	4007dc <gfx_mono_generic_draw_filled_rect+0x1c>
  4007ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007f2:	bf00      	nop
  4007f4:	004006f1 	.word	0x004006f1

004007f8 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4007f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007fc:	b083      	sub	sp, #12
  4007fe:	4604      	mov	r4, r0
  400800:	4688      	mov	r8, r1
  400802:	4691      	mov	r9, r2
  400804:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400806:	7a5b      	ldrb	r3, [r3, #9]
  400808:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40080c:	2100      	movs	r1, #0
  40080e:	9100      	str	r1, [sp, #0]
  400810:	4649      	mov	r1, r9
  400812:	4640      	mov	r0, r8
  400814:	4d21      	ldr	r5, [pc, #132]	; (40089c <gfx_mono_draw_char+0xa4>)
  400816:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400818:	f89b 3000 	ldrb.w	r3, [fp]
  40081c:	b113      	cbz	r3, 400824 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40081e:	b003      	add	sp, #12
  400820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400824:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400828:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40082a:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40082e:	bf18      	it	ne
  400830:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400832:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400836:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40083a:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40083c:	fb17 f70a 	smulbb	r7, r7, sl
  400840:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400844:	f8db 3004 	ldr.w	r3, [fp, #4]
  400848:	fa13 f787 	uxtah	r7, r3, r7
  40084c:	e01f      	b.n	40088e <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40084e:	0064      	lsls	r4, r4, #1
  400850:	b2e4      	uxtb	r4, r4
  400852:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400854:	b2eb      	uxtb	r3, r5
  400856:	429e      	cmp	r6, r3
  400858:	d910      	bls.n	40087c <gfx_mono_draw_char+0x84>
  40085a:	b2eb      	uxtb	r3, r5
  40085c:	eb08 0003 	add.w	r0, r8, r3
  400860:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400862:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400866:	bf08      	it	eq
  400868:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40086c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400870:	d0ed      	beq.n	40084e <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400872:	2201      	movs	r2, #1
  400874:	4649      	mov	r1, r9
  400876:	4b0a      	ldr	r3, [pc, #40]	; (4008a0 <gfx_mono_draw_char+0xa8>)
  400878:	4798      	blx	r3
  40087a:	e7e8      	b.n	40084e <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40087c:	f109 0901 	add.w	r9, r9, #1
  400880:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400884:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400888:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  40088c:	d0c7      	beq.n	40081e <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40088e:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400892:	2e00      	cmp	r6, #0
  400894:	d0f2      	beq.n	40087c <gfx_mono_draw_char+0x84>
  400896:	2500      	movs	r5, #0
  400898:	462c      	mov	r4, r5
  40089a:	e7de      	b.n	40085a <gfx_mono_draw_char+0x62>
  40089c:	004007c1 	.word	0x004007c1
  4008a0:	0040098d 	.word	0x0040098d

004008a4 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4008a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008a8:	4604      	mov	r4, r0
  4008aa:	4690      	mov	r8, r2
  4008ac:	461d      	mov	r5, r3
  4008ae:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4008b0:	4f0d      	ldr	r7, [pc, #52]	; (4008e8 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4008b2:	460e      	mov	r6, r1
  4008b4:	e008      	b.n	4008c8 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4008b6:	7a6a      	ldrb	r2, [r5, #9]
  4008b8:	3201      	adds	r2, #1
  4008ba:	4442      	add	r2, r8
  4008bc:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4008c0:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4008c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4008c6:	b16b      	cbz	r3, 4008e4 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4008c8:	7820      	ldrb	r0, [r4, #0]
  4008ca:	280a      	cmp	r0, #10
  4008cc:	d0f3      	beq.n	4008b6 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4008ce:	280d      	cmp	r0, #13
  4008d0:	d0f7      	beq.n	4008c2 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4008d2:	462b      	mov	r3, r5
  4008d4:	4642      	mov	r2, r8
  4008d6:	4649      	mov	r1, r9
  4008d8:	47b8      	blx	r7
			x += font->width;
  4008da:	7a2b      	ldrb	r3, [r5, #8]
  4008dc:	4499      	add	r9, r3
  4008de:	fa5f f989 	uxtb.w	r9, r9
  4008e2:	e7ee      	b.n	4008c2 <gfx_mono_draw_string+0x1e>
}
  4008e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008e8:	004007f9 	.word	0x004007f9

004008ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4008ec:	b570      	push	{r4, r5, r6, lr}
  4008ee:	4604      	mov	r4, r0
  4008f0:	460d      	mov	r5, r1
  4008f2:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4008f4:	b91b      	cbnz	r3, 4008fe <gfx_mono_ssd1306_put_byte+0x12>
  4008f6:	4b0d      	ldr	r3, [pc, #52]	; (40092c <gfx_mono_ssd1306_put_byte+0x40>)
  4008f8:	4798      	blx	r3
  4008fa:	42b0      	cmp	r0, r6
  4008fc:	d015      	beq.n	40092a <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4008fe:	4632      	mov	r2, r6
  400900:	4629      	mov	r1, r5
  400902:	4620      	mov	r0, r4
  400904:	4b0a      	ldr	r3, [pc, #40]	; (400930 <gfx_mono_ssd1306_put_byte+0x44>)
  400906:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400908:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40090c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400910:	4c08      	ldr	r4, [pc, #32]	; (400934 <gfx_mono_ssd1306_put_byte+0x48>)
  400912:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400914:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400918:	f040 0010 	orr.w	r0, r0, #16
  40091c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40091e:	f005 000f 	and.w	r0, r5, #15
  400922:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400924:	4630      	mov	r0, r6
  400926:	4b04      	ldr	r3, [pc, #16]	; (400938 <gfx_mono_ssd1306_put_byte+0x4c>)
  400928:	4798      	blx	r3
  40092a:	bd70      	pop	{r4, r5, r6, pc}
  40092c:	004006e1 	.word	0x004006e1
  400930:	004006d1 	.word	0x004006d1
  400934:	004009fd 	.word	0x004009fd
  400938:	00400c1d 	.word	0x00400c1d

0040093c <gfx_mono_ssd1306_init>:
{
  40093c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400940:	480d      	ldr	r0, [pc, #52]	; (400978 <gfx_mono_ssd1306_init+0x3c>)
  400942:	4b0e      	ldr	r3, [pc, #56]	; (40097c <gfx_mono_ssd1306_init+0x40>)
  400944:	4798      	blx	r3
	ssd1306_init();
  400946:	4b0e      	ldr	r3, [pc, #56]	; (400980 <gfx_mono_ssd1306_init+0x44>)
  400948:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40094a:	2040      	movs	r0, #64	; 0x40
  40094c:	4b0d      	ldr	r3, [pc, #52]	; (400984 <gfx_mono_ssd1306_init+0x48>)
  40094e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400950:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400952:	f04f 0801 	mov.w	r8, #1
  400956:	462f      	mov	r7, r5
  400958:	4e0b      	ldr	r6, [pc, #44]	; (400988 <gfx_mono_ssd1306_init+0x4c>)
{
  40095a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40095c:	4643      	mov	r3, r8
  40095e:	463a      	mov	r2, r7
  400960:	b2e1      	uxtb	r1, r4
  400962:	4628      	mov	r0, r5
  400964:	47b0      	blx	r6
  400966:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400968:	2c80      	cmp	r4, #128	; 0x80
  40096a:	d1f7      	bne.n	40095c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40096c:	3501      	adds	r5, #1
  40096e:	b2ed      	uxtb	r5, r5
  400970:	2d04      	cmp	r5, #4
  400972:	d1f2      	bne.n	40095a <gfx_mono_ssd1306_init+0x1e>
  400974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400978:	20400478 	.word	0x20400478
  40097c:	004006c5 	.word	0x004006c5
  400980:	00400a3d 	.word	0x00400a3d
  400984:	004009fd 	.word	0x004009fd
  400988:	004008ed 	.word	0x004008ed

0040098c <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  40098c:	09c3      	lsrs	r3, r0, #7
  40098e:	d12a      	bne.n	4009e6 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400990:	291f      	cmp	r1, #31
  400992:	d828      	bhi.n	4009e6 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400998:	4614      	mov	r4, r2
  40099a:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  40099c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40099e:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4009a2:	2201      	movs	r2, #1
  4009a4:	fa02 f701 	lsl.w	r7, r2, r1
  4009a8:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4009ac:	4601      	mov	r1, r0
  4009ae:	4630      	mov	r0, r6
  4009b0:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4009b2:	4798      	blx	r3
  4009b4:	4602      	mov	r2, r0
	switch (color) {
  4009b6:	2c01      	cmp	r4, #1
  4009b8:	d009      	beq.n	4009ce <gfx_mono_ssd1306_draw_pixel+0x42>
  4009ba:	b164      	cbz	r4, 4009d6 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4009bc:	2c02      	cmp	r4, #2
  4009be:	d00e      	beq.n	4009de <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4009c0:	2300      	movs	r3, #0
  4009c2:	4629      	mov	r1, r5
  4009c4:	4630      	mov	r0, r6
  4009c6:	4c09      	ldr	r4, [pc, #36]	; (4009ec <gfx_mono_ssd1306_draw_pixel+0x60>)
  4009c8:	47a0      	blx	r4
  4009ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4009ce:	ea48 0200 	orr.w	r2, r8, r0
  4009d2:	b2d2      	uxtb	r2, r2
		break;
  4009d4:	e7f4      	b.n	4009c0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4009d6:	ea20 0207 	bic.w	r2, r0, r7
  4009da:	b2d2      	uxtb	r2, r2
		break;
  4009dc:	e7f0      	b.n	4009c0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4009de:	ea88 0200 	eor.w	r2, r8, r0
  4009e2:	b2d2      	uxtb	r2, r2
		break;
  4009e4:	e7ec      	b.n	4009c0 <gfx_mono_ssd1306_draw_pixel+0x34>
  4009e6:	4770      	bx	lr
  4009e8:	004006e1 	.word	0x004006e1
  4009ec:	004008ed 	.word	0x004008ed

004009f0 <gfx_mono_ssd1306_get_byte>:
{
  4009f0:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4009f2:	4b01      	ldr	r3, [pc, #4]	; (4009f8 <gfx_mono_ssd1306_get_byte+0x8>)
  4009f4:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4009f6:	bd08      	pop	{r3, pc}
  4009f8:	004006e1 	.word	0x004006e1

004009fc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4009fc:	b538      	push	{r3, r4, r5, lr}
  4009fe:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a00:	2208      	movs	r2, #8
  400a02:	4b09      	ldr	r3, [pc, #36]	; (400a28 <ssd1306_write_command+0x2c>)
  400a04:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a06:	4c09      	ldr	r4, [pc, #36]	; (400a2c <ssd1306_write_command+0x30>)
  400a08:	2101      	movs	r1, #1
  400a0a:	4620      	mov	r0, r4
  400a0c:	4b08      	ldr	r3, [pc, #32]	; (400a30 <ssd1306_write_command+0x34>)
  400a0e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400a10:	2301      	movs	r3, #1
  400a12:	461a      	mov	r2, r3
  400a14:	4629      	mov	r1, r5
  400a16:	4620      	mov	r0, r4
  400a18:	4c06      	ldr	r4, [pc, #24]	; (400a34 <ssd1306_write_command+0x38>)
  400a1a:	47a0      	blx	r4
	delay_us(10);
  400a1c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a20:	4b05      	ldr	r3, [pc, #20]	; (400a38 <ssd1306_write_command+0x3c>)
  400a22:	4798      	blx	r3
  400a24:	bd38      	pop	{r3, r4, r5, pc}
  400a26:	bf00      	nop
  400a28:	400e1000 	.word	0x400e1000
  400a2c:	40008000 	.word	0x40008000
  400a30:	004004fd 	.word	0x004004fd
  400a34:	00400513 	.word	0x00400513
  400a38:	20400001 	.word	0x20400001

00400a3c <ssd1306_init>:
{
  400a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a40:	4d66      	ldr	r5, [pc, #408]	; (400bdc <ssd1306_init+0x1a0>)
  400a42:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400a46:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a48:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a4c:	4b64      	ldr	r3, [pc, #400]	; (400be0 <ssd1306_init+0x1a4>)
  400a4e:	2708      	movs	r7, #8
  400a50:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a52:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400a56:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a58:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a5c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a5e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a60:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400a66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a6a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a6c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400a6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a72:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400a74:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a76:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a7a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a7c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a7e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a84:	f022 0208 	bic.w	r2, r2, #8
  400a88:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a8c:	f022 0208 	bic.w	r2, r2, #8
  400a90:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400a92:	601f      	str	r7, [r3, #0]
  400a94:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a96:	631f      	str	r7, [r3, #48]	; 0x30
  400a98:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400c18 <ssd1306_init+0x1dc>
  400a9e:	2300      	movs	r3, #0
  400aa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400aa4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400aa8:	4640      	mov	r0, r8
  400aaa:	4c4e      	ldr	r4, [pc, #312]	; (400be4 <ssd1306_init+0x1a8>)
  400aac:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400aae:	2300      	movs	r3, #0
  400ab0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ab4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ab8:	4640      	mov	r0, r8
  400aba:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400abc:	2300      	movs	r3, #0
  400abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ac2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ac6:	4640      	mov	r0, r8
  400ac8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400aca:	2300      	movs	r3, #0
  400acc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400ad0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ad4:	4640      	mov	r0, r8
  400ad6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400ad8:	2300      	movs	r3, #0
  400ada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ade:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ae2:	4640      	mov	r0, r8
  400ae4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400ae6:	2300      	movs	r3, #0
  400ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400aec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400af0:	4640      	mov	r0, r8
  400af2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400af4:	4c3c      	ldr	r4, [pc, #240]	; (400be8 <ssd1306_init+0x1ac>)
  400af6:	f04f 0902 	mov.w	r9, #2
  400afa:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400afe:	f04f 0880 	mov.w	r8, #128	; 0x80
  400b02:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400b06:	6863      	ldr	r3, [r4, #4]
  400b08:	f043 0301 	orr.w	r3, r3, #1
  400b0c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400b0e:	463a      	mov	r2, r7
  400b10:	2101      	movs	r1, #1
  400b12:	4620      	mov	r0, r4
  400b14:	4b35      	ldr	r3, [pc, #212]	; (400bec <ssd1306_init+0x1b0>)
  400b16:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400b18:	2200      	movs	r2, #0
  400b1a:	2101      	movs	r1, #1
  400b1c:	4620      	mov	r0, r4
  400b1e:	4b34      	ldr	r3, [pc, #208]	; (400bf0 <ssd1306_init+0x1b4>)
  400b20:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400b22:	2200      	movs	r2, #0
  400b24:	2101      	movs	r1, #1
  400b26:	4620      	mov	r0, r4
  400b28:	4b32      	ldr	r3, [pc, #200]	; (400bf4 <ssd1306_init+0x1b8>)
  400b2a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400b2c:	6863      	ldr	r3, [r4, #4]
  400b2e:	f023 0302 	bic.w	r3, r3, #2
  400b32:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400b34:	2200      	movs	r2, #0
  400b36:	2101      	movs	r1, #1
  400b38:	4620      	mov	r0, r4
  400b3a:	4b2f      	ldr	r3, [pc, #188]	; (400bf8 <ssd1306_init+0x1bc>)
  400b3c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400b3e:	6863      	ldr	r3, [r4, #4]
  400b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400b44:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400b46:	6863      	ldr	r3, [r4, #4]
  400b48:	f043 0310 	orr.w	r3, r3, #16
  400b4c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400b4e:	492b      	ldr	r1, [pc, #172]	; (400bfc <ssd1306_init+0x1c0>)
  400b50:	482b      	ldr	r0, [pc, #172]	; (400c00 <ssd1306_init+0x1c4>)
  400b52:	4b2c      	ldr	r3, [pc, #176]	; (400c04 <ssd1306_init+0x1c8>)
  400b54:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400b56:	b2c2      	uxtb	r2, r0
  400b58:	2101      	movs	r1, #1
  400b5a:	4620      	mov	r0, r4
  400b5c:	4b2a      	ldr	r3, [pc, #168]	; (400c08 <ssd1306_init+0x1cc>)
  400b5e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400b60:	4620      	mov	r0, r4
  400b62:	4b2a      	ldr	r3, [pc, #168]	; (400c0c <ssd1306_init+0x1d0>)
  400b64:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b66:	2301      	movs	r3, #1
  400b68:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b6a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b70:	4c27      	ldr	r4, [pc, #156]	; (400c10 <ssd1306_init+0x1d4>)
  400b72:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b74:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400b76:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b7a:	47a0      	blx	r4
  400b7c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400b7e:	20a8      	movs	r0, #168	; 0xa8
  400b80:	4c24      	ldr	r4, [pc, #144]	; (400c14 <ssd1306_init+0x1d8>)
  400b82:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400b84:	201f      	movs	r0, #31
  400b86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400b88:	20d3      	movs	r0, #211	; 0xd3
  400b8a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400b8c:	2000      	movs	r0, #0
  400b8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400b90:	2040      	movs	r0, #64	; 0x40
  400b92:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400b94:	20a1      	movs	r0, #161	; 0xa1
  400b96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400b98:	20c8      	movs	r0, #200	; 0xc8
  400b9a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b9c:	20da      	movs	r0, #218	; 0xda
  400b9e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400ba0:	4648      	mov	r0, r9
  400ba2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400ba4:	2081      	movs	r0, #129	; 0x81
  400ba6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400ba8:	208f      	movs	r0, #143	; 0x8f
  400baa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400bac:	20a4      	movs	r0, #164	; 0xa4
  400bae:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400bb0:	20a6      	movs	r0, #166	; 0xa6
  400bb2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400bb4:	20d5      	movs	r0, #213	; 0xd5
  400bb6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400bb8:	4640      	mov	r0, r8
  400bba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400bbc:	208d      	movs	r0, #141	; 0x8d
  400bbe:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400bc0:	2014      	movs	r0, #20
  400bc2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400bc4:	20db      	movs	r0, #219	; 0xdb
  400bc6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400bc8:	2040      	movs	r0, #64	; 0x40
  400bca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400bcc:	20d9      	movs	r0, #217	; 0xd9
  400bce:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400bd0:	20f1      	movs	r0, #241	; 0xf1
  400bd2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400bd4:	20af      	movs	r0, #175	; 0xaf
  400bd6:	47a0      	blx	r4
  400bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400bdc:	400e1200 	.word	0x400e1200
  400be0:	400e1000 	.word	0x400e1000
  400be4:	00400f05 	.word	0x00400f05
  400be8:	40008000 	.word	0x40008000
  400bec:	00400583 	.word	0x00400583
  400bf0:	00400547 	.word	0x00400547
  400bf4:	00400565 	.word	0x00400565
  400bf8:	004005c9 	.word	0x004005c9
  400bfc:	08f0d180 	.word	0x08f0d180
  400c00:	000f4240 	.word	0x000f4240
  400c04:	004005dd 	.word	0x004005dd
  400c08:	004005f3 	.word	0x004005f3
  400c0c:	004004d1 	.word	0x004004d1
  400c10:	20400001 	.word	0x20400001
  400c14:	004009fd 	.word	0x004009fd
  400c18:	400e1400 	.word	0x400e1400

00400c1c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400c1c:	b538      	push	{r3, r4, r5, lr}
  400c1e:	4605      	mov	r5, r0
  400c20:	2208      	movs	r2, #8
  400c22:	4b09      	ldr	r3, [pc, #36]	; (400c48 <ssd1306_write_data+0x2c>)
  400c24:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c26:	4c09      	ldr	r4, [pc, #36]	; (400c4c <ssd1306_write_data+0x30>)
  400c28:	2101      	movs	r1, #1
  400c2a:	4620      	mov	r0, r4
  400c2c:	4b08      	ldr	r3, [pc, #32]	; (400c50 <ssd1306_write_data+0x34>)
  400c2e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400c30:	2301      	movs	r3, #1
  400c32:	461a      	mov	r2, r3
  400c34:	4629      	mov	r1, r5
  400c36:	4620      	mov	r0, r4
  400c38:	4c06      	ldr	r4, [pc, #24]	; (400c54 <ssd1306_write_data+0x38>)
  400c3a:	47a0      	blx	r4
	delay_us(10);
  400c3c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c40:	4b05      	ldr	r3, [pc, #20]	; (400c58 <ssd1306_write_data+0x3c>)
  400c42:	4798      	blx	r3
  400c44:	bd38      	pop	{r3, r4, r5, pc}
  400c46:	bf00      	nop
  400c48:	400e1000 	.word	0x400e1000
  400c4c:	40008000 	.word	0x40008000
  400c50:	004004fd 	.word	0x004004fd
  400c54:	00400513 	.word	0x00400513
  400c58:	20400001 	.word	0x20400001

00400c5c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c5c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c5e:	4810      	ldr	r0, [pc, #64]	; (400ca0 <sysclk_init+0x44>)
  400c60:	4b10      	ldr	r3, [pc, #64]	; (400ca4 <sysclk_init+0x48>)
  400c62:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c64:	213e      	movs	r1, #62	; 0x3e
  400c66:	2000      	movs	r0, #0
  400c68:	4b0f      	ldr	r3, [pc, #60]	; (400ca8 <sysclk_init+0x4c>)
  400c6a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c6c:	4c0f      	ldr	r4, [pc, #60]	; (400cac <sysclk_init+0x50>)
  400c6e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c70:	2800      	cmp	r0, #0
  400c72:	d0fc      	beq.n	400c6e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c74:	4b0e      	ldr	r3, [pc, #56]	; (400cb0 <sysclk_init+0x54>)
  400c76:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c78:	4a0e      	ldr	r2, [pc, #56]	; (400cb4 <sysclk_init+0x58>)
  400c7a:	4b0f      	ldr	r3, [pc, #60]	; (400cb8 <sysclk_init+0x5c>)
  400c7c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400c7e:	4c0f      	ldr	r4, [pc, #60]	; (400cbc <sysclk_init+0x60>)
  400c80:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c82:	2800      	cmp	r0, #0
  400c84:	d0fc      	beq.n	400c80 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400c86:	2002      	movs	r0, #2
  400c88:	4b0d      	ldr	r3, [pc, #52]	; (400cc0 <sysclk_init+0x64>)
  400c8a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c8c:	2000      	movs	r0, #0
  400c8e:	4b0d      	ldr	r3, [pc, #52]	; (400cc4 <sysclk_init+0x68>)
  400c90:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c92:	4b0d      	ldr	r3, [pc, #52]	; (400cc8 <sysclk_init+0x6c>)
  400c94:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c96:	4802      	ldr	r0, [pc, #8]	; (400ca0 <sysclk_init+0x44>)
  400c98:	4b02      	ldr	r3, [pc, #8]	; (400ca4 <sysclk_init+0x48>)
  400c9a:	4798      	blx	r3
  400c9c:	bd10      	pop	{r4, pc}
  400c9e:	bf00      	nop
  400ca0:	11e1a300 	.word	0x11e1a300
  400ca4:	0040166d 	.word	0x0040166d
  400ca8:	004010f9 	.word	0x004010f9
  400cac:	0040114d 	.word	0x0040114d
  400cb0:	0040115d 	.word	0x0040115d
  400cb4:	20183f01 	.word	0x20183f01
  400cb8:	400e0600 	.word	0x400e0600
  400cbc:	0040116d 	.word	0x0040116d
  400cc0:	0040105d 	.word	0x0040105d
  400cc4:	00401095 	.word	0x00401095
  400cc8:	00401561 	.word	0x00401561

00400ccc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cd2:	4b48      	ldr	r3, [pc, #288]	; (400df4 <board_init+0x128>)
  400cd4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cda:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400cde:	4b46      	ldr	r3, [pc, #280]	; (400df8 <board_init+0x12c>)
  400ce0:	2200      	movs	r2, #0
  400ce2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400ce6:	695a      	ldr	r2, [r3, #20]
  400ce8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400cec:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400cee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cf2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400cf6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400cfa:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400cfe:	f007 0007 	and.w	r0, r7, #7
  400d02:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400d04:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400d08:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400d0c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d10:	f3bf 8f4f 	dsb	sy
  400d14:	f04f 34ff 	mov.w	r4, #4294967295
  400d18:	fa04 fc00 	lsl.w	ip, r4, r0
  400d1c:	fa06 f000 	lsl.w	r0, r6, r0
  400d20:	fa04 f40e 	lsl.w	r4, r4, lr
  400d24:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d28:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d2a:	463a      	mov	r2, r7
  400d2c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d2e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d32:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400d36:	3a01      	subs	r2, #1
  400d38:	4423      	add	r3, r4
  400d3a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d3e:	d1f6      	bne.n	400d2e <board_init+0x62>
        } while(sets--);
  400d40:	3e01      	subs	r6, #1
  400d42:	4460      	add	r0, ip
  400d44:	f1b6 3fff 	cmp.w	r6, #4294967295
  400d48:	d1ef      	bne.n	400d2a <board_init+0x5e>
  400d4a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400d4e:	4b2a      	ldr	r3, [pc, #168]	; (400df8 <board_init+0x12c>)
  400d50:	695a      	ldr	r2, [r3, #20]
  400d52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d56:	615a      	str	r2, [r3, #20]
  400d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d5c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d60:	4a26      	ldr	r2, [pc, #152]	; (400dfc <board_init+0x130>)
  400d62:	4927      	ldr	r1, [pc, #156]	; (400e00 <board_init+0x134>)
  400d64:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d66:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400d6a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d70:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d74:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d78:	f022 0201 	bic.w	r2, r2, #1
  400d7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d80:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d84:	f022 0201 	bic.w	r2, r2, #1
  400d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d90:	f3bf 8f6f 	isb	sy
  400d94:	200a      	movs	r0, #10
  400d96:	4c1b      	ldr	r4, [pc, #108]	; (400e04 <board_init+0x138>)
  400d98:	47a0      	blx	r4
  400d9a:	200b      	movs	r0, #11
  400d9c:	47a0      	blx	r4
  400d9e:	200c      	movs	r0, #12
  400da0:	47a0      	blx	r4
  400da2:	2010      	movs	r0, #16
  400da4:	47a0      	blx	r4
  400da6:	2011      	movs	r0, #17
  400da8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400daa:	4b17      	ldr	r3, [pc, #92]	; (400e08 <board_init+0x13c>)
  400dac:	f44f 7280 	mov.w	r2, #256	; 0x100
  400db0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400db6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400db8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400dc0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400dc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400dc6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dcc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dce:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400dd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ddc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dde:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400de2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400de4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400de8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400dec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400df2:	bf00      	nop
  400df4:	400e1850 	.word	0x400e1850
  400df8:	e000ed00 	.word	0xe000ed00
  400dfc:	400e0c00 	.word	0x400e0c00
  400e00:	5a00080c 	.word	0x5a00080c
  400e04:	0040117d 	.word	0x0040117d
  400e08:	400e1200 	.word	0x400e1200

00400e0c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400e0c:	6301      	str	r1, [r0, #48]	; 0x30
  400e0e:	4770      	bx	lr

00400e10 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400e10:	6341      	str	r1, [r0, #52]	; 0x34
  400e12:	4770      	bx	lr

00400e14 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e14:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e16:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e1a:	d03a      	beq.n	400e92 <pio_set_peripheral+0x7e>
  400e1c:	d813      	bhi.n	400e46 <pio_set_peripheral+0x32>
  400e1e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e22:	d025      	beq.n	400e70 <pio_set_peripheral+0x5c>
  400e24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e28:	d10a      	bne.n	400e40 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e2a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e2c:	4313      	orrs	r3, r2
  400e2e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e30:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e32:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e34:	400b      	ands	r3, r1
  400e36:	ea23 0302 	bic.w	r3, r3, r2
  400e3a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e3c:	6042      	str	r2, [r0, #4]
  400e3e:	4770      	bx	lr
	switch (ul_type) {
  400e40:	2900      	cmp	r1, #0
  400e42:	d1fb      	bne.n	400e3c <pio_set_peripheral+0x28>
  400e44:	4770      	bx	lr
  400e46:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e4a:	d021      	beq.n	400e90 <pio_set_peripheral+0x7c>
  400e4c:	d809      	bhi.n	400e62 <pio_set_peripheral+0x4e>
  400e4e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e52:	d1f3      	bne.n	400e3c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e54:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e56:	4313      	orrs	r3, r2
  400e58:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e5a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e5c:	4313      	orrs	r3, r2
  400e5e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e60:	e7ec      	b.n	400e3c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400e62:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e66:	d013      	beq.n	400e90 <pio_set_peripheral+0x7c>
  400e68:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e6c:	d010      	beq.n	400e90 <pio_set_peripheral+0x7c>
  400e6e:	e7e5      	b.n	400e3c <pio_set_peripheral+0x28>
{
  400e70:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e72:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e74:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400e76:	43d3      	mvns	r3, r2
  400e78:	4021      	ands	r1, r4
  400e7a:	461c      	mov	r4, r3
  400e7c:	4019      	ands	r1, r3
  400e7e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e82:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e84:	400b      	ands	r3, r1
  400e86:	4023      	ands	r3, r4
  400e88:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400e8a:	6042      	str	r2, [r0, #4]
}
  400e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e90:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e94:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400e96:	400b      	ands	r3, r1
  400e98:	ea23 0302 	bic.w	r3, r3, r2
  400e9c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e9e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ea0:	4313      	orrs	r3, r2
  400ea2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ea4:	e7ca      	b.n	400e3c <pio_set_peripheral+0x28>

00400ea6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400ea6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ea8:	f012 0f01 	tst.w	r2, #1
  400eac:	d10d      	bne.n	400eca <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400eae:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400eb0:	f012 0f0a 	tst.w	r2, #10
  400eb4:	d00b      	beq.n	400ece <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400eb6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400eb8:	f012 0f02 	tst.w	r2, #2
  400ebc:	d109      	bne.n	400ed2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ebe:	f012 0f08 	tst.w	r2, #8
  400ec2:	d008      	beq.n	400ed6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ec4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400ec8:	e005      	b.n	400ed6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400eca:	6641      	str	r1, [r0, #100]	; 0x64
  400ecc:	e7f0      	b.n	400eb0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400ece:	6241      	str	r1, [r0, #36]	; 0x24
  400ed0:	e7f2      	b.n	400eb8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400ed2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400ed6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400ed8:	6001      	str	r1, [r0, #0]
  400eda:	4770      	bx	lr

00400edc <pio_set_output>:
{
  400edc:	b410      	push	{r4}
  400ede:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400ee0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ee2:	b94c      	cbnz	r4, 400ef8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400ee4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400ee6:	b14b      	cbz	r3, 400efc <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400ee8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400eea:	b94a      	cbnz	r2, 400f00 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400eec:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400eee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ef0:	6001      	str	r1, [r0, #0]
}
  400ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ef6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400ef8:	6641      	str	r1, [r0, #100]	; 0x64
  400efa:	e7f4      	b.n	400ee6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400efc:	6541      	str	r1, [r0, #84]	; 0x54
  400efe:	e7f4      	b.n	400eea <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f00:	6301      	str	r1, [r0, #48]	; 0x30
  400f02:	e7f4      	b.n	400eee <pio_set_output+0x12>

00400f04 <pio_configure>:
{
  400f04:	b570      	push	{r4, r5, r6, lr}
  400f06:	b082      	sub	sp, #8
  400f08:	4605      	mov	r5, r0
  400f0a:	4616      	mov	r6, r2
  400f0c:	461c      	mov	r4, r3
	switch (ul_type) {
  400f0e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f12:	d014      	beq.n	400f3e <pio_configure+0x3a>
  400f14:	d90a      	bls.n	400f2c <pio_configure+0x28>
  400f16:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f1a:	d024      	beq.n	400f66 <pio_configure+0x62>
  400f1c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f20:	d021      	beq.n	400f66 <pio_configure+0x62>
  400f22:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f26:	d017      	beq.n	400f58 <pio_configure+0x54>
		return 0;
  400f28:	2000      	movs	r0, #0
  400f2a:	e01a      	b.n	400f62 <pio_configure+0x5e>
	switch (ul_type) {
  400f2c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f30:	d005      	beq.n	400f3e <pio_configure+0x3a>
  400f32:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f36:	d002      	beq.n	400f3e <pio_configure+0x3a>
  400f38:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f3c:	d1f4      	bne.n	400f28 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400f3e:	4632      	mov	r2, r6
  400f40:	4628      	mov	r0, r5
  400f42:	4b11      	ldr	r3, [pc, #68]	; (400f88 <pio_configure+0x84>)
  400f44:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f46:	f014 0f01 	tst.w	r4, #1
  400f4a:	d102      	bne.n	400f52 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400f4c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400f4e:	2001      	movs	r0, #1
  400f50:	e007      	b.n	400f62 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400f52:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400f54:	2001      	movs	r0, #1
  400f56:	e004      	b.n	400f62 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400f58:	461a      	mov	r2, r3
  400f5a:	4631      	mov	r1, r6
  400f5c:	4b0b      	ldr	r3, [pc, #44]	; (400f8c <pio_configure+0x88>)
  400f5e:	4798      	blx	r3
	return 1;
  400f60:	2001      	movs	r0, #1
}
  400f62:	b002      	add	sp, #8
  400f64:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400f66:	f004 0301 	and.w	r3, r4, #1
  400f6a:	9300      	str	r3, [sp, #0]
  400f6c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400f70:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f74:	bf14      	ite	ne
  400f76:	2200      	movne	r2, #0
  400f78:	2201      	moveq	r2, #1
  400f7a:	4631      	mov	r1, r6
  400f7c:	4628      	mov	r0, r5
  400f7e:	4c04      	ldr	r4, [pc, #16]	; (400f90 <pio_configure+0x8c>)
  400f80:	47a0      	blx	r4
	return 1;
  400f82:	2001      	movs	r0, #1
		break;
  400f84:	e7ed      	b.n	400f62 <pio_configure+0x5e>
  400f86:	bf00      	nop
  400f88:	00400e15 	.word	0x00400e15
  400f8c:	00400ea7 	.word	0x00400ea7
  400f90:	00400edd 	.word	0x00400edd

00400f94 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400f94:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400f96:	420b      	tst	r3, r1
}
  400f98:	bf14      	ite	ne
  400f9a:	2001      	movne	r0, #1
  400f9c:	2000      	moveq	r0, #0
  400f9e:	4770      	bx	lr

00400fa0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400fa0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400fa2:	4770      	bx	lr

00400fa4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400fa4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400fa6:	4770      	bx	lr

00400fa8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fac:	4604      	mov	r4, r0
  400fae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400fb0:	4b0e      	ldr	r3, [pc, #56]	; (400fec <pio_handler_process+0x44>)
  400fb2:	4798      	blx	r3
  400fb4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400fb6:	4620      	mov	r0, r4
  400fb8:	4b0d      	ldr	r3, [pc, #52]	; (400ff0 <pio_handler_process+0x48>)
  400fba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400fbc:	4005      	ands	r5, r0
  400fbe:	d013      	beq.n	400fe8 <pio_handler_process+0x40>
  400fc0:	4c0c      	ldr	r4, [pc, #48]	; (400ff4 <pio_handler_process+0x4c>)
  400fc2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400fc6:	e003      	b.n	400fd0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400fc8:	42b4      	cmp	r4, r6
  400fca:	d00d      	beq.n	400fe8 <pio_handler_process+0x40>
  400fcc:	3410      	adds	r4, #16
		while (status != 0) {
  400fce:	b15d      	cbz	r5, 400fe8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400fd0:	6820      	ldr	r0, [r4, #0]
  400fd2:	4540      	cmp	r0, r8
  400fd4:	d1f8      	bne.n	400fc8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400fd6:	6861      	ldr	r1, [r4, #4]
  400fd8:	4229      	tst	r1, r5
  400fda:	d0f5      	beq.n	400fc8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400fdc:	68e3      	ldr	r3, [r4, #12]
  400fde:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400fe0:	6863      	ldr	r3, [r4, #4]
  400fe2:	ea25 0503 	bic.w	r5, r5, r3
  400fe6:	e7ef      	b.n	400fc8 <pio_handler_process+0x20>
  400fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fec:	00400fa1 	.word	0x00400fa1
  400ff0:	00400fa5 	.word	0x00400fa5
  400ff4:	20400678 	.word	0x20400678

00400ff8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ff8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ffa:	210a      	movs	r1, #10
  400ffc:	4801      	ldr	r0, [pc, #4]	; (401004 <PIOA_Handler+0xc>)
  400ffe:	4b02      	ldr	r3, [pc, #8]	; (401008 <PIOA_Handler+0x10>)
  401000:	4798      	blx	r3
  401002:	bd08      	pop	{r3, pc}
  401004:	400e0e00 	.word	0x400e0e00
  401008:	00400fa9 	.word	0x00400fa9

0040100c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40100c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40100e:	210b      	movs	r1, #11
  401010:	4801      	ldr	r0, [pc, #4]	; (401018 <PIOB_Handler+0xc>)
  401012:	4b02      	ldr	r3, [pc, #8]	; (40101c <PIOB_Handler+0x10>)
  401014:	4798      	blx	r3
  401016:	bd08      	pop	{r3, pc}
  401018:	400e1000 	.word	0x400e1000
  40101c:	00400fa9 	.word	0x00400fa9

00401020 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401020:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401022:	210c      	movs	r1, #12
  401024:	4801      	ldr	r0, [pc, #4]	; (40102c <PIOC_Handler+0xc>)
  401026:	4b02      	ldr	r3, [pc, #8]	; (401030 <PIOC_Handler+0x10>)
  401028:	4798      	blx	r3
  40102a:	bd08      	pop	{r3, pc}
  40102c:	400e1200 	.word	0x400e1200
  401030:	00400fa9 	.word	0x00400fa9

00401034 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401034:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401036:	2110      	movs	r1, #16
  401038:	4801      	ldr	r0, [pc, #4]	; (401040 <PIOD_Handler+0xc>)
  40103a:	4b02      	ldr	r3, [pc, #8]	; (401044 <PIOD_Handler+0x10>)
  40103c:	4798      	blx	r3
  40103e:	bd08      	pop	{r3, pc}
  401040:	400e1400 	.word	0x400e1400
  401044:	00400fa9 	.word	0x00400fa9

00401048 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401048:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40104a:	2111      	movs	r1, #17
  40104c:	4801      	ldr	r0, [pc, #4]	; (401054 <PIOE_Handler+0xc>)
  40104e:	4b02      	ldr	r3, [pc, #8]	; (401058 <PIOE_Handler+0x10>)
  401050:	4798      	blx	r3
  401052:	bd08      	pop	{r3, pc}
  401054:	400e1600 	.word	0x400e1600
  401058:	00400fa9 	.word	0x00400fa9

0040105c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40105c:	2803      	cmp	r0, #3
  40105e:	d011      	beq.n	401084 <pmc_mck_set_division+0x28>
  401060:	2804      	cmp	r0, #4
  401062:	d012      	beq.n	40108a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401064:	2802      	cmp	r0, #2
  401066:	bf0c      	ite	eq
  401068:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40106c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40106e:	4a08      	ldr	r2, [pc, #32]	; (401090 <pmc_mck_set_division+0x34>)
  401070:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401076:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401078:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40107a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40107c:	f013 0f08 	tst.w	r3, #8
  401080:	d0fb      	beq.n	40107a <pmc_mck_set_division+0x1e>
}
  401082:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401084:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401088:	e7f1      	b.n	40106e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40108a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40108e:	e7ee      	b.n	40106e <pmc_mck_set_division+0x12>
  401090:	400e0600 	.word	0x400e0600

00401094 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401094:	4a17      	ldr	r2, [pc, #92]	; (4010f4 <pmc_switch_mck_to_pllack+0x60>)
  401096:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40109c:	4318      	orrs	r0, r3
  40109e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010a2:	f013 0f08 	tst.w	r3, #8
  4010a6:	d10a      	bne.n	4010be <pmc_switch_mck_to_pllack+0x2a>
  4010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010ac:	4911      	ldr	r1, [pc, #68]	; (4010f4 <pmc_switch_mck_to_pllack+0x60>)
  4010ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010b0:	f012 0f08 	tst.w	r2, #8
  4010b4:	d103      	bne.n	4010be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010b6:	3b01      	subs	r3, #1
  4010b8:	d1f9      	bne.n	4010ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4010ba:	2001      	movs	r0, #1
  4010bc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4010be:	4a0d      	ldr	r2, [pc, #52]	; (4010f4 <pmc_switch_mck_to_pllack+0x60>)
  4010c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010c2:	f023 0303 	bic.w	r3, r3, #3
  4010c6:	f043 0302 	orr.w	r3, r3, #2
  4010ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010ce:	f013 0f08 	tst.w	r3, #8
  4010d2:	d10a      	bne.n	4010ea <pmc_switch_mck_to_pllack+0x56>
  4010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010d8:	4906      	ldr	r1, [pc, #24]	; (4010f4 <pmc_switch_mck_to_pllack+0x60>)
  4010da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010dc:	f012 0f08 	tst.w	r2, #8
  4010e0:	d105      	bne.n	4010ee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010e2:	3b01      	subs	r3, #1
  4010e4:	d1f9      	bne.n	4010da <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4010e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4010e8:	4770      	bx	lr
	return 0;
  4010ea:	2000      	movs	r0, #0
  4010ec:	4770      	bx	lr
  4010ee:	2000      	movs	r0, #0
  4010f0:	4770      	bx	lr
  4010f2:	bf00      	nop
  4010f4:	400e0600 	.word	0x400e0600

004010f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4010f8:	b9a0      	cbnz	r0, 401124 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010fa:	480e      	ldr	r0, [pc, #56]	; (401134 <pmc_switch_mainck_to_xtal+0x3c>)
  4010fc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4010fe:	0209      	lsls	r1, r1, #8
  401100:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401102:	4a0d      	ldr	r2, [pc, #52]	; (401138 <pmc_switch_mainck_to_xtal+0x40>)
  401104:	401a      	ands	r2, r3
  401106:	4b0d      	ldr	r3, [pc, #52]	; (40113c <pmc_switch_mainck_to_xtal+0x44>)
  401108:	4313      	orrs	r3, r2
  40110a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40110c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40110e:	4602      	mov	r2, r0
  401110:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401112:	f013 0f01 	tst.w	r3, #1
  401116:	d0fb      	beq.n	401110 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401118:	4a06      	ldr	r2, [pc, #24]	; (401134 <pmc_switch_mainck_to_xtal+0x3c>)
  40111a:	6a11      	ldr	r1, [r2, #32]
  40111c:	4b08      	ldr	r3, [pc, #32]	; (401140 <pmc_switch_mainck_to_xtal+0x48>)
  40111e:	430b      	orrs	r3, r1
  401120:	6213      	str	r3, [r2, #32]
  401122:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401124:	4903      	ldr	r1, [pc, #12]	; (401134 <pmc_switch_mainck_to_xtal+0x3c>)
  401126:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401128:	4a06      	ldr	r2, [pc, #24]	; (401144 <pmc_switch_mainck_to_xtal+0x4c>)
  40112a:	401a      	ands	r2, r3
  40112c:	4b06      	ldr	r3, [pc, #24]	; (401148 <pmc_switch_mainck_to_xtal+0x50>)
  40112e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401130:	620b      	str	r3, [r1, #32]
  401132:	4770      	bx	lr
  401134:	400e0600 	.word	0x400e0600
  401138:	ffc8fffc 	.word	0xffc8fffc
  40113c:	00370001 	.word	0x00370001
  401140:	01370000 	.word	0x01370000
  401144:	fec8fffc 	.word	0xfec8fffc
  401148:	01370002 	.word	0x01370002

0040114c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40114c:	4b02      	ldr	r3, [pc, #8]	; (401158 <pmc_osc_is_ready_mainck+0xc>)
  40114e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401150:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401154:	4770      	bx	lr
  401156:	bf00      	nop
  401158:	400e0600 	.word	0x400e0600

0040115c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40115c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401160:	4b01      	ldr	r3, [pc, #4]	; (401168 <pmc_disable_pllack+0xc>)
  401162:	629a      	str	r2, [r3, #40]	; 0x28
  401164:	4770      	bx	lr
  401166:	bf00      	nop
  401168:	400e0600 	.word	0x400e0600

0040116c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40116c:	4b02      	ldr	r3, [pc, #8]	; (401178 <pmc_is_locked_pllack+0xc>)
  40116e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401170:	f000 0002 	and.w	r0, r0, #2
  401174:	4770      	bx	lr
  401176:	bf00      	nop
  401178:	400e0600 	.word	0x400e0600

0040117c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40117c:	283f      	cmp	r0, #63	; 0x3f
  40117e:	d81e      	bhi.n	4011be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401180:	281f      	cmp	r0, #31
  401182:	d80c      	bhi.n	40119e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401184:	4b11      	ldr	r3, [pc, #68]	; (4011cc <pmc_enable_periph_clk+0x50>)
  401186:	699a      	ldr	r2, [r3, #24]
  401188:	2301      	movs	r3, #1
  40118a:	4083      	lsls	r3, r0
  40118c:	4393      	bics	r3, r2
  40118e:	d018      	beq.n	4011c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401190:	2301      	movs	r3, #1
  401192:	fa03 f000 	lsl.w	r0, r3, r0
  401196:	4b0d      	ldr	r3, [pc, #52]	; (4011cc <pmc_enable_periph_clk+0x50>)
  401198:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40119a:	2000      	movs	r0, #0
  40119c:	4770      	bx	lr
		ul_id -= 32;
  40119e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4011a0:	4b0a      	ldr	r3, [pc, #40]	; (4011cc <pmc_enable_periph_clk+0x50>)
  4011a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4011a6:	2301      	movs	r3, #1
  4011a8:	4083      	lsls	r3, r0
  4011aa:	4393      	bics	r3, r2
  4011ac:	d00b      	beq.n	4011c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011ae:	2301      	movs	r3, #1
  4011b0:	fa03 f000 	lsl.w	r0, r3, r0
  4011b4:	4b05      	ldr	r3, [pc, #20]	; (4011cc <pmc_enable_periph_clk+0x50>)
  4011b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4011ba:	2000      	movs	r0, #0
  4011bc:	4770      	bx	lr
		return 1;
  4011be:	2001      	movs	r0, #1
  4011c0:	4770      	bx	lr
	return 0;
  4011c2:	2000      	movs	r0, #0
  4011c4:	4770      	bx	lr
  4011c6:	2000      	movs	r0, #0
}
  4011c8:	4770      	bx	lr
  4011ca:	bf00      	nop
  4011cc:	400e0600 	.word	0x400e0600

004011d0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4011d0:	4770      	bx	lr
	...

004011d4 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4011d4:	4a10      	ldr	r2, [pc, #64]	; (401218 <pmc_enable_waitmode+0x44>)
  4011d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4011d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4011e0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4011e2:	6a11      	ldr	r1, [r2, #32]
  4011e4:	4b0d      	ldr	r3, [pc, #52]	; (40121c <pmc_enable_waitmode+0x48>)
  4011e6:	430b      	orrs	r3, r1
  4011e8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ec:	f013 0f08 	tst.w	r3, #8
  4011f0:	d0fb      	beq.n	4011ea <pmc_enable_waitmode+0x16>
  4011f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4011f6:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4011f8:	3b01      	subs	r3, #1
  4011fa:	d1fc      	bne.n	4011f6 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4011fc:	4a06      	ldr	r2, [pc, #24]	; (401218 <pmc_enable_waitmode+0x44>)
  4011fe:	6a13      	ldr	r3, [r2, #32]
  401200:	f013 0f08 	tst.w	r3, #8
  401204:	d0fb      	beq.n	4011fe <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401206:	4a04      	ldr	r2, [pc, #16]	; (401218 <pmc_enable_waitmode+0x44>)
  401208:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  40120a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40120e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  401212:	6713      	str	r3, [r2, #112]	; 0x70
  401214:	4770      	bx	lr
  401216:	bf00      	nop
  401218:	400e0600 	.word	0x400e0600
  40121c:	00370004 	.word	0x00370004

00401220 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401224:	1e43      	subs	r3, r0, #1
  401226:	2b04      	cmp	r3, #4
  401228:	f200 8107 	bhi.w	40143a <pmc_sleep+0x21a>
  40122c:	e8df f013 	tbh	[pc, r3, lsl #1]
  401230:	00050005 	.word	0x00050005
  401234:	00150015 	.word	0x00150015
  401238:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40123a:	4a81      	ldr	r2, [pc, #516]	; (401440 <pmc_sleep+0x220>)
  40123c:	6913      	ldr	r3, [r2, #16]
  40123e:	f023 0304 	bic.w	r3, r3, #4
  401242:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401244:	2201      	movs	r2, #1
  401246:	4b7f      	ldr	r3, [pc, #508]	; (401444 <pmc_sleep+0x224>)
  401248:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40124a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40124e:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401254:	bf30      	wfi
  401256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40125a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40125c:	2803      	cmp	r0, #3
  40125e:	bf0c      	ite	eq
  401260:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  401262:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401266:	4b78      	ldr	r3, [pc, #480]	; (401448 <pmc_sleep+0x228>)
  401268:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40126a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40126c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401270:	2200      	movs	r2, #0
  401272:	4b74      	ldr	r3, [pc, #464]	; (401444 <pmc_sleep+0x224>)
  401274:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401276:	2201      	movs	r2, #1
  401278:	4b74      	ldr	r3, [pc, #464]	; (40144c <pmc_sleep+0x22c>)
  40127a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40127c:	4b74      	ldr	r3, [pc, #464]	; (401450 <pmc_sleep+0x230>)
  40127e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401280:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  401282:	4a74      	ldr	r2, [pc, #464]	; (401454 <pmc_sleep+0x234>)
  401284:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401288:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40128a:	4a73      	ldr	r2, [pc, #460]	; (401458 <pmc_sleep+0x238>)
  40128c:	433a      	orrs	r2, r7
  40128e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401290:	f005 0903 	and.w	r9, r5, #3
  401294:	f1b9 0f01 	cmp.w	r9, #1
  401298:	f240 8089 	bls.w	4013ae <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40129c:	f025 0103 	bic.w	r1, r5, #3
  4012a0:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4012a4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012a6:	461a      	mov	r2, r3
  4012a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012aa:	f013 0f08 	tst.w	r3, #8
  4012ae:	d0fb      	beq.n	4012a8 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4012b0:	f011 0f70 	tst.w	r1, #112	; 0x70
  4012b4:	d008      	beq.n	4012c8 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4012b6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4012ba:	4b65      	ldr	r3, [pc, #404]	; (401450 <pmc_sleep+0x230>)
  4012bc:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012be:	461a      	mov	r2, r3
  4012c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012c2:	f013 0f08 	tst.w	r3, #8
  4012c6:	d0fb      	beq.n	4012c0 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4012c8:	4b64      	ldr	r3, [pc, #400]	; (40145c <pmc_sleep+0x23c>)
  4012ca:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012cc:	4a60      	ldr	r2, [pc, #384]	; (401450 <pmc_sleep+0x230>)
  4012ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4012d4:	d0fb      	beq.n	4012ce <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012d6:	4a5e      	ldr	r2, [pc, #376]	; (401450 <pmc_sleep+0x230>)
  4012d8:	6a11      	ldr	r1, [r2, #32]
  4012da:	4b61      	ldr	r3, [pc, #388]	; (401460 <pmc_sleep+0x240>)
  4012dc:	400b      	ands	r3, r1
  4012de:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012e2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4012e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012ea:	d0fb      	beq.n	4012e4 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4012ec:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4012f0:	4a58      	ldr	r2, [pc, #352]	; (401454 <pmc_sleep+0x234>)
  4012f2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4012f4:	2c04      	cmp	r4, #4
  4012f6:	d05c      	beq.n	4013b2 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4012f8:	4c52      	ldr	r4, [pc, #328]	; (401444 <pmc_sleep+0x224>)
  4012fa:	2301      	movs	r3, #1
  4012fc:	7023      	strb	r3, [r4, #0]
  4012fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401302:	b662      	cpsie	i

		pmc_enable_waitmode();
  401304:	4b57      	ldr	r3, [pc, #348]	; (401464 <pmc_sleep+0x244>)
  401306:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401308:	b672      	cpsid	i
  40130a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40130e:	2300      	movs	r3, #0
  401310:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  401312:	f017 0f02 	tst.w	r7, #2
  401316:	d055      	beq.n	4013c4 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401318:	4a4d      	ldr	r2, [pc, #308]	; (401450 <pmc_sleep+0x230>)
  40131a:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40131c:	4952      	ldr	r1, [pc, #328]	; (401468 <pmc_sleep+0x248>)
  40131e:	4019      	ands	r1, r3
  401320:	4b52      	ldr	r3, [pc, #328]	; (40146c <pmc_sleep+0x24c>)
  401322:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401324:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401326:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401328:	4b51      	ldr	r3, [pc, #324]	; (401470 <pmc_sleep+0x250>)
  40132a:	400b      	ands	r3, r1
  40132c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401330:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401332:	4b50      	ldr	r3, [pc, #320]	; (401474 <pmc_sleep+0x254>)
  401334:	4033      	ands	r3, r6
  401336:	2b00      	cmp	r3, #0
  401338:	d06e      	beq.n	401418 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40133a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40133e:	4b44      	ldr	r3, [pc, #272]	; (401450 <pmc_sleep+0x230>)
  401340:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  401342:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401344:	f1b9 0f02 	cmp.w	r9, #2
  401348:	d104      	bne.n	401354 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40134a:	4a41      	ldr	r2, [pc, #260]	; (401450 <pmc_sleep+0x230>)
  40134c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40134e:	f013 0f02 	tst.w	r3, #2
  401352:	d0fb      	beq.n	40134c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401354:	4a3e      	ldr	r2, [pc, #248]	; (401450 <pmc_sleep+0x230>)
  401356:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40135c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401360:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401362:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401364:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401366:	f013 0f08 	tst.w	r3, #8
  40136a:	d0fb      	beq.n	401364 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40136c:	4b39      	ldr	r3, [pc, #228]	; (401454 <pmc_sleep+0x234>)
  40136e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  401372:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401376:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401378:	461a      	mov	r2, r3
  40137a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40137c:	f013 0f08 	tst.w	r3, #8
  401380:	d0fb      	beq.n	40137a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  401382:	4a33      	ldr	r2, [pc, #204]	; (401450 <pmc_sleep+0x230>)
  401384:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401386:	420b      	tst	r3, r1
  401388:	d0fc      	beq.n	401384 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40138a:	2200      	movs	r2, #0
  40138c:	4b2f      	ldr	r3, [pc, #188]	; (40144c <pmc_sleep+0x22c>)
  40138e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401390:	4b39      	ldr	r3, [pc, #228]	; (401478 <pmc_sleep+0x258>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	b11b      	cbz	r3, 40139e <pmc_sleep+0x17e>
			callback_clocks_restored();
  401396:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401398:	2200      	movs	r2, #0
  40139a:	4b37      	ldr	r3, [pc, #220]	; (401478 <pmc_sleep+0x258>)
  40139c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40139e:	2201      	movs	r2, #1
  4013a0:	4b28      	ldr	r3, [pc, #160]	; (401444 <pmc_sleep+0x224>)
  4013a2:	701a      	strb	r2, [r3, #0]
  4013a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013a8:	b662      	cpsie	i
  4013aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4013ae:	4629      	mov	r1, r5
  4013b0:	e77e      	b.n	4012b0 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013b2:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4013b6:	6a11      	ldr	r1, [r2, #32]
  4013b8:	4b30      	ldr	r3, [pc, #192]	; (40147c <pmc_sleep+0x25c>)
  4013ba:	400b      	ands	r3, r1
  4013bc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013c0:	6213      	str	r3, [r2, #32]
  4013c2:	e799      	b.n	4012f8 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013c4:	f017 0f01 	tst.w	r7, #1
  4013c8:	d0b3      	beq.n	401332 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013ca:	4b21      	ldr	r3, [pc, #132]	; (401450 <pmc_sleep+0x230>)
  4013cc:	6a1b      	ldr	r3, [r3, #32]
  4013ce:	f013 0f01 	tst.w	r3, #1
  4013d2:	d10b      	bne.n	4013ec <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013d4:	491e      	ldr	r1, [pc, #120]	; (401450 <pmc_sleep+0x230>)
  4013d6:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4013d8:	4a29      	ldr	r2, [pc, #164]	; (401480 <pmc_sleep+0x260>)
  4013da:	401a      	ands	r2, r3
  4013dc:	4b29      	ldr	r3, [pc, #164]	; (401484 <pmc_sleep+0x264>)
  4013de:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013e0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013e2:	460a      	mov	r2, r1
  4013e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013e6:	f013 0f01 	tst.w	r3, #1
  4013ea:	d0fb      	beq.n	4013e4 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4013ec:	4b18      	ldr	r3, [pc, #96]	; (401450 <pmc_sleep+0x230>)
  4013ee:	6a1b      	ldr	r3, [r3, #32]
  4013f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013f4:	d108      	bne.n	401408 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4013f6:	4a16      	ldr	r2, [pc, #88]	; (401450 <pmc_sleep+0x230>)
  4013f8:	6a11      	ldr	r1, [r2, #32]
  4013fa:	4b23      	ldr	r3, [pc, #140]	; (401488 <pmc_sleep+0x268>)
  4013fc:	430b      	orrs	r3, r1
  4013fe:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401400:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401402:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401406:	d0fb      	beq.n	401400 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401408:	4a11      	ldr	r2, [pc, #68]	; (401450 <pmc_sleep+0x230>)
  40140a:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  40140c:	4b18      	ldr	r3, [pc, #96]	; (401470 <pmc_sleep+0x250>)
  40140e:	400b      	ands	r3, r1
  401410:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401414:	6213      	str	r3, [r2, #32]
  401416:	e78c      	b.n	401332 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401418:	2100      	movs	r1, #0
  40141a:	e793      	b.n	401344 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40141c:	4a08      	ldr	r2, [pc, #32]	; (401440 <pmc_sleep+0x220>)
  40141e:	6913      	ldr	r3, [r2, #16]
  401420:	f043 0304 	orr.w	r3, r3, #4
  401424:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401426:	4a19      	ldr	r2, [pc, #100]	; (40148c <pmc_sleep+0x26c>)
  401428:	4b19      	ldr	r3, [pc, #100]	; (401490 <pmc_sleep+0x270>)
  40142a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40142c:	2201      	movs	r2, #1
  40142e:	4b05      	ldr	r3, [pc, #20]	; (401444 <pmc_sleep+0x224>)
  401430:	701a      	strb	r2, [r3, #0]
  401432:	f3bf 8f5f 	dmb	sy
  401436:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401438:	bf30      	wfi
  40143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40143e:	bf00      	nop
  401440:	e000ed00 	.word	0xe000ed00
  401444:	20400018 	.word	0x20400018
  401448:	004011d1 	.word	0x004011d1
  40144c:	204006e8 	.word	0x204006e8
  401450:	400e0600 	.word	0x400e0600
  401454:	400e0c00 	.word	0x400e0c00
  401458:	00370008 	.word	0x00370008
  40145c:	0040115d 	.word	0x0040115d
  401460:	fec8ffff 	.word	0xfec8ffff
  401464:	004011d5 	.word	0x004011d5
  401468:	fec8fffc 	.word	0xfec8fffc
  40146c:	01370002 	.word	0x01370002
  401470:	ffc8ff87 	.word	0xffc8ff87
  401474:	07ff0000 	.word	0x07ff0000
  401478:	204006ec 	.word	0x204006ec
  40147c:	ffc8fffe 	.word	0xffc8fffe
  401480:	ffc8fffc 	.word	0xffc8fffc
  401484:	00370001 	.word	0x00370001
  401488:	01370000 	.word	0x01370000
  40148c:	a5000004 	.word	0xa5000004
  401490:	400e1810 	.word	0x400e1810

00401494 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401494:	e7fe      	b.n	401494 <Dummy_Handler>
	...

00401498 <Reset_Handler>:
{
  401498:	b500      	push	{lr}
  40149a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40149c:	4b25      	ldr	r3, [pc, #148]	; (401534 <Reset_Handler+0x9c>)
  40149e:	4a26      	ldr	r2, [pc, #152]	; (401538 <Reset_Handler+0xa0>)
  4014a0:	429a      	cmp	r2, r3
  4014a2:	d010      	beq.n	4014c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4014a4:	4b25      	ldr	r3, [pc, #148]	; (40153c <Reset_Handler+0xa4>)
  4014a6:	4a23      	ldr	r2, [pc, #140]	; (401534 <Reset_Handler+0x9c>)
  4014a8:	429a      	cmp	r2, r3
  4014aa:	d20c      	bcs.n	4014c6 <Reset_Handler+0x2e>
  4014ac:	3b01      	subs	r3, #1
  4014ae:	1a9b      	subs	r3, r3, r2
  4014b0:	f023 0303 	bic.w	r3, r3, #3
  4014b4:	3304      	adds	r3, #4
  4014b6:	4413      	add	r3, r2
  4014b8:	491f      	ldr	r1, [pc, #124]	; (401538 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4014ba:	f851 0b04 	ldr.w	r0, [r1], #4
  4014be:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4014c2:	429a      	cmp	r2, r3
  4014c4:	d1f9      	bne.n	4014ba <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4014c6:	4b1e      	ldr	r3, [pc, #120]	; (401540 <Reset_Handler+0xa8>)
  4014c8:	4a1e      	ldr	r2, [pc, #120]	; (401544 <Reset_Handler+0xac>)
  4014ca:	429a      	cmp	r2, r3
  4014cc:	d20a      	bcs.n	4014e4 <Reset_Handler+0x4c>
  4014ce:	3b01      	subs	r3, #1
  4014d0:	1a9b      	subs	r3, r3, r2
  4014d2:	f023 0303 	bic.w	r3, r3, #3
  4014d6:	3304      	adds	r3, #4
  4014d8:	4413      	add	r3, r2
                *pDest++ = 0;
  4014da:	2100      	movs	r1, #0
  4014dc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4014e0:	4293      	cmp	r3, r2
  4014e2:	d1fb      	bne.n	4014dc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014e4:	4a18      	ldr	r2, [pc, #96]	; (401548 <Reset_Handler+0xb0>)
  4014e6:	4b19      	ldr	r3, [pc, #100]	; (40154c <Reset_Handler+0xb4>)
  4014e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014ec:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4014ee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014f2:	fab3 f383 	clz	r3, r3
  4014f6:	095b      	lsrs	r3, r3, #5
  4014f8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4014fa:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4014fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401500:	2200      	movs	r2, #0
  401502:	4b13      	ldr	r3, [pc, #76]	; (401550 <Reset_Handler+0xb8>)
  401504:	701a      	strb	r2, [r3, #0]
	return flags;
  401506:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401508:	4a12      	ldr	r2, [pc, #72]	; (401554 <Reset_Handler+0xbc>)
  40150a:	6813      	ldr	r3, [r2, #0]
  40150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401510:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401516:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40151a:	b129      	cbz	r1, 401528 <Reset_Handler+0x90>
		cpu_irq_enable();
  40151c:	2201      	movs	r2, #1
  40151e:	4b0c      	ldr	r3, [pc, #48]	; (401550 <Reset_Handler+0xb8>)
  401520:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401522:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401526:	b662      	cpsie	i
        __libc_init_array();
  401528:	4b0b      	ldr	r3, [pc, #44]	; (401558 <Reset_Handler+0xc0>)
  40152a:	4798      	blx	r3
        main();
  40152c:	4b0b      	ldr	r3, [pc, #44]	; (40155c <Reset_Handler+0xc4>)
  40152e:	4798      	blx	r3
  401530:	e7fe      	b.n	401530 <Reset_Handler+0x98>
  401532:	bf00      	nop
  401534:	20400000 	.word	0x20400000
  401538:	00402b14 	.word	0x00402b14
  40153c:	20400454 	.word	0x20400454
  401540:	20400718 	.word	0x20400718
  401544:	20400454 	.word	0x20400454
  401548:	e000ed00 	.word	0xe000ed00
  40154c:	00400000 	.word	0x00400000
  401550:	20400018 	.word	0x20400018
  401554:	e000ed88 	.word	0xe000ed88
  401558:	00401f09 	.word	0x00401f09
  40155c:	00401a25 	.word	0x00401a25

00401560 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401560:	4b3b      	ldr	r3, [pc, #236]	; (401650 <SystemCoreClockUpdate+0xf0>)
  401562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401564:	f003 0303 	and.w	r3, r3, #3
  401568:	2b01      	cmp	r3, #1
  40156a:	d01d      	beq.n	4015a8 <SystemCoreClockUpdate+0x48>
  40156c:	b183      	cbz	r3, 401590 <SystemCoreClockUpdate+0x30>
  40156e:	2b02      	cmp	r3, #2
  401570:	d036      	beq.n	4015e0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401572:	4b37      	ldr	r3, [pc, #220]	; (401650 <SystemCoreClockUpdate+0xf0>)
  401574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401576:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40157a:	2b70      	cmp	r3, #112	; 0x70
  40157c:	d05f      	beq.n	40163e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40157e:	4b34      	ldr	r3, [pc, #208]	; (401650 <SystemCoreClockUpdate+0xf0>)
  401580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401582:	4934      	ldr	r1, [pc, #208]	; (401654 <SystemCoreClockUpdate+0xf4>)
  401584:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401588:	680b      	ldr	r3, [r1, #0]
  40158a:	40d3      	lsrs	r3, r2
  40158c:	600b      	str	r3, [r1, #0]
  40158e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401590:	4b31      	ldr	r3, [pc, #196]	; (401658 <SystemCoreClockUpdate+0xf8>)
  401592:	695b      	ldr	r3, [r3, #20]
  401594:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401598:	bf14      	ite	ne
  40159a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40159e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4015a2:	4b2c      	ldr	r3, [pc, #176]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015a4:	601a      	str	r2, [r3, #0]
  4015a6:	e7e4      	b.n	401572 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015a8:	4b29      	ldr	r3, [pc, #164]	; (401650 <SystemCoreClockUpdate+0xf0>)
  4015aa:	6a1b      	ldr	r3, [r3, #32]
  4015ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015b0:	d003      	beq.n	4015ba <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4015b2:	4a2a      	ldr	r2, [pc, #168]	; (40165c <SystemCoreClockUpdate+0xfc>)
  4015b4:	4b27      	ldr	r3, [pc, #156]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015b6:	601a      	str	r2, [r3, #0]
  4015b8:	e7db      	b.n	401572 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015ba:	4a29      	ldr	r2, [pc, #164]	; (401660 <SystemCoreClockUpdate+0x100>)
  4015bc:	4b25      	ldr	r3, [pc, #148]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015be:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015c0:	4b23      	ldr	r3, [pc, #140]	; (401650 <SystemCoreClockUpdate+0xf0>)
  4015c2:	6a1b      	ldr	r3, [r3, #32]
  4015c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015c8:	2b10      	cmp	r3, #16
  4015ca:	d005      	beq.n	4015d8 <SystemCoreClockUpdate+0x78>
  4015cc:	2b20      	cmp	r3, #32
  4015ce:	d1d0      	bne.n	401572 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4015d0:	4a22      	ldr	r2, [pc, #136]	; (40165c <SystemCoreClockUpdate+0xfc>)
  4015d2:	4b20      	ldr	r3, [pc, #128]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015d4:	601a      	str	r2, [r3, #0]
          break;
  4015d6:	e7cc      	b.n	401572 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4015d8:	4a22      	ldr	r2, [pc, #136]	; (401664 <SystemCoreClockUpdate+0x104>)
  4015da:	4b1e      	ldr	r3, [pc, #120]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015dc:	601a      	str	r2, [r3, #0]
          break;
  4015de:	e7c8      	b.n	401572 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015e0:	4b1b      	ldr	r3, [pc, #108]	; (401650 <SystemCoreClockUpdate+0xf0>)
  4015e2:	6a1b      	ldr	r3, [r3, #32]
  4015e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015e8:	d016      	beq.n	401618 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015ea:	4a1c      	ldr	r2, [pc, #112]	; (40165c <SystemCoreClockUpdate+0xfc>)
  4015ec:	4b19      	ldr	r3, [pc, #100]	; (401654 <SystemCoreClockUpdate+0xf4>)
  4015ee:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015f0:	4b17      	ldr	r3, [pc, #92]	; (401650 <SystemCoreClockUpdate+0xf0>)
  4015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015f4:	f003 0303 	and.w	r3, r3, #3
  4015f8:	2b02      	cmp	r3, #2
  4015fa:	d1ba      	bne.n	401572 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015fc:	4a14      	ldr	r2, [pc, #80]	; (401650 <SystemCoreClockUpdate+0xf0>)
  4015fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401600:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401602:	4814      	ldr	r0, [pc, #80]	; (401654 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401604:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401608:	6803      	ldr	r3, [r0, #0]
  40160a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40160e:	b2d2      	uxtb	r2, r2
  401610:	fbb3 f3f2 	udiv	r3, r3, r2
  401614:	6003      	str	r3, [r0, #0]
  401616:	e7ac      	b.n	401572 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401618:	4a11      	ldr	r2, [pc, #68]	; (401660 <SystemCoreClockUpdate+0x100>)
  40161a:	4b0e      	ldr	r3, [pc, #56]	; (401654 <SystemCoreClockUpdate+0xf4>)
  40161c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40161e:	4b0c      	ldr	r3, [pc, #48]	; (401650 <SystemCoreClockUpdate+0xf0>)
  401620:	6a1b      	ldr	r3, [r3, #32]
  401622:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401626:	2b10      	cmp	r3, #16
  401628:	d005      	beq.n	401636 <SystemCoreClockUpdate+0xd6>
  40162a:	2b20      	cmp	r3, #32
  40162c:	d1e0      	bne.n	4015f0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40162e:	4a0b      	ldr	r2, [pc, #44]	; (40165c <SystemCoreClockUpdate+0xfc>)
  401630:	4b08      	ldr	r3, [pc, #32]	; (401654 <SystemCoreClockUpdate+0xf4>)
  401632:	601a      	str	r2, [r3, #0]
          break;
  401634:	e7dc      	b.n	4015f0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401636:	4a0b      	ldr	r2, [pc, #44]	; (401664 <SystemCoreClockUpdate+0x104>)
  401638:	4b06      	ldr	r3, [pc, #24]	; (401654 <SystemCoreClockUpdate+0xf4>)
  40163a:	601a      	str	r2, [r3, #0]
          break;
  40163c:	e7d8      	b.n	4015f0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40163e:	4a05      	ldr	r2, [pc, #20]	; (401654 <SystemCoreClockUpdate+0xf4>)
  401640:	6813      	ldr	r3, [r2, #0]
  401642:	4909      	ldr	r1, [pc, #36]	; (401668 <SystemCoreClockUpdate+0x108>)
  401644:	fba1 1303 	umull	r1, r3, r1, r3
  401648:	085b      	lsrs	r3, r3, #1
  40164a:	6013      	str	r3, [r2, #0]
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop
  401650:	400e0600 	.word	0x400e0600
  401654:	2040001c 	.word	0x2040001c
  401658:	400e1810 	.word	0x400e1810
  40165c:	00b71b00 	.word	0x00b71b00
  401660:	003d0900 	.word	0x003d0900
  401664:	007a1200 	.word	0x007a1200
  401668:	aaaaaaab 	.word	0xaaaaaaab

0040166c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40166c:	4b16      	ldr	r3, [pc, #88]	; (4016c8 <system_init_flash+0x5c>)
  40166e:	4298      	cmp	r0, r3
  401670:	d913      	bls.n	40169a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401672:	4b16      	ldr	r3, [pc, #88]	; (4016cc <system_init_flash+0x60>)
  401674:	4298      	cmp	r0, r3
  401676:	d915      	bls.n	4016a4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401678:	4b15      	ldr	r3, [pc, #84]	; (4016d0 <system_init_flash+0x64>)
  40167a:	4298      	cmp	r0, r3
  40167c:	d916      	bls.n	4016ac <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40167e:	4b15      	ldr	r3, [pc, #84]	; (4016d4 <system_init_flash+0x68>)
  401680:	4298      	cmp	r0, r3
  401682:	d917      	bls.n	4016b4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401684:	4b14      	ldr	r3, [pc, #80]	; (4016d8 <system_init_flash+0x6c>)
  401686:	4298      	cmp	r0, r3
  401688:	d918      	bls.n	4016bc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40168a:	4b14      	ldr	r3, [pc, #80]	; (4016dc <system_init_flash+0x70>)
  40168c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40168e:	bf94      	ite	ls
  401690:	4a13      	ldrls	r2, [pc, #76]	; (4016e0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401692:	4a14      	ldrhi	r2, [pc, #80]	; (4016e4 <system_init_flash+0x78>)
  401694:	4b14      	ldr	r3, [pc, #80]	; (4016e8 <system_init_flash+0x7c>)
  401696:	601a      	str	r2, [r3, #0]
  401698:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40169a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40169e:	4b12      	ldr	r3, [pc, #72]	; (4016e8 <system_init_flash+0x7c>)
  4016a0:	601a      	str	r2, [r3, #0]
  4016a2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016a4:	4a11      	ldr	r2, [pc, #68]	; (4016ec <system_init_flash+0x80>)
  4016a6:	4b10      	ldr	r3, [pc, #64]	; (4016e8 <system_init_flash+0x7c>)
  4016a8:	601a      	str	r2, [r3, #0]
  4016aa:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016ac:	4a10      	ldr	r2, [pc, #64]	; (4016f0 <system_init_flash+0x84>)
  4016ae:	4b0e      	ldr	r3, [pc, #56]	; (4016e8 <system_init_flash+0x7c>)
  4016b0:	601a      	str	r2, [r3, #0]
  4016b2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016b4:	4a0f      	ldr	r2, [pc, #60]	; (4016f4 <system_init_flash+0x88>)
  4016b6:	4b0c      	ldr	r3, [pc, #48]	; (4016e8 <system_init_flash+0x7c>)
  4016b8:	601a      	str	r2, [r3, #0]
  4016ba:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016bc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016c0:	4b09      	ldr	r3, [pc, #36]	; (4016e8 <system_init_flash+0x7c>)
  4016c2:	601a      	str	r2, [r3, #0]
  4016c4:	4770      	bx	lr
  4016c6:	bf00      	nop
  4016c8:	015ef3bf 	.word	0x015ef3bf
  4016cc:	02bde77f 	.word	0x02bde77f
  4016d0:	041cdb3f 	.word	0x041cdb3f
  4016d4:	057bceff 	.word	0x057bceff
  4016d8:	06dac2bf 	.word	0x06dac2bf
  4016dc:	0839b67f 	.word	0x0839b67f
  4016e0:	04000500 	.word	0x04000500
  4016e4:	04000600 	.word	0x04000600
  4016e8:	400e0c00 	.word	0x400e0c00
  4016ec:	04000100 	.word	0x04000100
  4016f0:	04000200 	.word	0x04000200
  4016f4:	04000300 	.word	0x04000300

004016f8 <io_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq);
void pin_toggle(Pio *pio, uint32_t mask);
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type);
void pisca_led(int n, int t);

void io_init(void){
  4016f8:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(LED1_PIO_ID);
  4016fa:	200a      	movs	r0, #10
  4016fc:	4c12      	ldr	r4, [pc, #72]	; (401748 <io_init+0x50>)
  4016fe:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  401700:	200c      	movs	r0, #12
  401702:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  401704:	200b      	movs	r0, #11
  401706:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PLACA_PIO);
  401708:	4d10      	ldr	r5, [pc, #64]	; (40174c <io_init+0x54>)
  40170a:	4628      	mov	r0, r5
  40170c:	47a0      	blx	r4
	
	pio_configure(LED1_PIO, PIO_OUTPUT_1, LED1_IDX_MASK, PIO_DEFAULT);
  40170e:	2300      	movs	r3, #0
  401710:	2201      	movs	r2, #1
  401712:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401716:	480e      	ldr	r0, [pc, #56]	; (401750 <io_init+0x58>)
  401718:	4c0e      	ldr	r4, [pc, #56]	; (401754 <io_init+0x5c>)
  40171a:	47a0      	blx	r4
	pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_IDX_MASK, PIO_DEFAULT);
  40171c:	2300      	movs	r3, #0
  40171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401722:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401726:	4628      	mov	r0, r5
  401728:	47a0      	blx	r4
	pio_configure(LED3_PIO, PIO_OUTPUT_1, LED3_IDX_MASK, PIO_DEFAULT);
  40172a:	2300      	movs	r3, #0
  40172c:	2204      	movs	r2, #4
  40172e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401732:	4809      	ldr	r0, [pc, #36]	; (401758 <io_init+0x60>)
  401734:	47a0      	blx	r4
	pio_configure(LED_PLACA_PIO, PIO_OUTPUT_1, LED_PLACA_IDX_MASK, PIO_DEFAULT);
  401736:	2300      	movs	r3, #0
  401738:	f44f 7280 	mov.w	r2, #256	; 0x100
  40173c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401740:	4628      	mov	r0, r5
  401742:	47a0      	blx	r4
  401744:	bd38      	pop	{r3, r4, r5, pc}
  401746:	bf00      	nop
  401748:	0040117d 	.word	0x0040117d
  40174c:	400e1200 	.word	0x400e1200
  401750:	400e0e00 	.word	0x400e0e00
  401754:	00400f05 	.word	0x00400f05
  401758:	400e1000 	.word	0x400e1000

0040175c <TC_init>:
}

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  40175c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401760:	b085      	sub	sp, #20
  401762:	4606      	mov	r6, r0
  401764:	460c      	mov	r4, r1
  401766:	4617      	mov	r7, r2
  401768:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	pmc_enable_periph_clk(ID_TC);
  40176a:	4608      	mov	r0, r1
  40176c:	4b18      	ldr	r3, [pc, #96]	; (4017d0 <TC_init+0x74>)
  40176e:	4798      	blx	r3
	
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401770:	4d18      	ldr	r5, [pc, #96]	; (4017d4 <TC_init+0x78>)
  401772:	9500      	str	r5, [sp, #0]
  401774:	ab02      	add	r3, sp, #8
  401776:	aa03      	add	r2, sp, #12
  401778:	4629      	mov	r1, r5
  40177a:	4640      	mov	r0, r8
  40177c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4017ec <TC_init+0x90>
  401780:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401782:	9a02      	ldr	r2, [sp, #8]
  401784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401788:	4639      	mov	r1, r7
  40178a:	4630      	mov	r0, r6
  40178c:	4b12      	ldr	r3, [pc, #72]	; (4017d8 <TC_init+0x7c>)
  40178e:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401790:	9a03      	ldr	r2, [sp, #12]
  401792:	fbb5 f2f2 	udiv	r2, r5, r2
  401796:	fbb2 f2f8 	udiv	r2, r2, r8
  40179a:	4639      	mov	r1, r7
  40179c:	4630      	mov	r0, r6
  40179e:	4b0f      	ldr	r3, [pc, #60]	; (4017dc <TC_init+0x80>)
  4017a0:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4017a2:	b263      	sxtb	r3, r4
  4017a4:	095b      	lsrs	r3, r3, #5
  4017a6:	f004 041f 	and.w	r4, r4, #31
  4017aa:	2201      	movs	r2, #1
  4017ac:	fa02 f404 	lsl.w	r4, r2, r4
  4017b0:	4a0b      	ldr	r2, [pc, #44]	; (4017e0 <TC_init+0x84>)
  4017b2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4017b6:	2210      	movs	r2, #16
  4017b8:	4639      	mov	r1, r7
  4017ba:	4630      	mov	r0, r6
  4017bc:	4b09      	ldr	r3, [pc, #36]	; (4017e4 <TC_init+0x88>)
  4017be:	4798      	blx	r3

	tc_start(TC, TC_CHANNEL);
  4017c0:	4639      	mov	r1, r7
  4017c2:	4630      	mov	r0, r6
  4017c4:	4b08      	ldr	r3, [pc, #32]	; (4017e8 <TC_init+0x8c>)
  4017c6:	4798      	blx	r3
}
  4017c8:	b005      	add	sp, #20
  4017ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4017ce:	bf00      	nop
  4017d0:	0040117d 	.word	0x0040117d
  4017d4:	11e1a300 	.word	0x11e1a300
  4017d8:	0040061b 	.word	0x0040061b
  4017dc:	0040063d 	.word	0x0040063d
  4017e0:	e000e100 	.word	0xe000e100
  4017e4:	00400645 	.word	0x00400645
  4017e8:	00400635 	.word	0x00400635
  4017ec:	00400655 	.word	0x00400655

004017f0 <TC1_Handler>:

void TC1_Handler(void){
  4017f0:	b500      	push	{lr}
  4017f2:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	ul_dummy = tc_get_status(TC0, 1);
  4017f4:	2101      	movs	r1, #1
  4017f6:	4805      	ldr	r0, [pc, #20]	; (40180c <TC1_Handler+0x1c>)
  4017f8:	4b05      	ldr	r3, [pc, #20]	; (401810 <TC1_Handler+0x20>)
  4017fa:	4798      	blx	r3
  4017fc:	9001      	str	r0, [sp, #4]

	UNUSED(ul_dummy);
  4017fe:	9b01      	ldr	r3, [sp, #4]

	flag_tc = 1;
  401800:	2201      	movs	r2, #1
  401802:	4b04      	ldr	r3, [pc, #16]	; (401814 <TC1_Handler+0x24>)
  401804:	701a      	strb	r2, [r3, #0]
}
  401806:	b003      	add	sp, #12
  401808:	f85d fb04 	ldr.w	pc, [sp], #4
  40180c:	4000c000 	.word	0x4000c000
  401810:	0040064d 	.word	0x0040064d
  401814:	204006f1 	.word	0x204006f1

00401818 <TC0_Handler>:

void TC0_Handler(void){
  401818:	b500      	push	{lr}
  40181a:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	ul_dummy = tc_get_status(TC0, 0);
  40181c:	2100      	movs	r1, #0
  40181e:	4805      	ldr	r0, [pc, #20]	; (401834 <TC0_Handler+0x1c>)
  401820:	4b05      	ldr	r3, [pc, #20]	; (401838 <TC0_Handler+0x20>)
  401822:	4798      	blx	r3
  401824:	9001      	str	r0, [sp, #4]

	UNUSED(ul_dummy);
  401826:	9b01      	ldr	r3, [sp, #4]

	flag_tc0 = 1;
  401828:	2201      	movs	r2, #1
  40182a:	4b04      	ldr	r3, [pc, #16]	; (40183c <TC0_Handler+0x24>)
  40182c:	701a      	strb	r2, [r3, #0]
}
  40182e:	b003      	add	sp, #12
  401830:	f85d fb04 	ldr.w	pc, [sp], #4
  401834:	4000c000 	.word	0x4000c000
  401838:	0040064d 	.word	0x0040064d
  40183c:	204006f2 	.word	0x204006f2

00401840 <RTT_Handler>:
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
}

void RTT_Handler(void){
  401840:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = rtt_get_status(RTT);
  401842:	4805      	ldr	r0, [pc, #20]	; (401858 <RTT_Handler+0x18>)
  401844:	4b05      	ldr	r3, [pc, #20]	; (40185c <RTT_Handler+0x1c>)
  401846:	4798      	blx	r3

// 	/* IRQ due to Time has changed */
// 	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401848:	f010 0f01 	tst.w	r0, #1
  40184c:	d002      	beq.n	401854 <RTT_Handler+0x14>
		flag_rtt = 1;  
  40184e:	2201      	movs	r2, #1
  401850:	4b03      	ldr	r3, [pc, #12]	; (401860 <RTT_Handler+0x20>)
  401852:	701a      	strb	r2, [r3, #0]
  401854:	bd08      	pop	{r3, pc}
  401856:	bf00      	nop
  401858:	400e1830 	.word	0x400e1830
  40185c:	00400489 	.word	0x00400489
  401860:	20400020 	.word	0x20400020

00401864 <RTC_init>:
	}
}

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  401864:	b082      	sub	sp, #8
  401866:	b570      	push	{r4, r5, r6, lr}
  401868:	b082      	sub	sp, #8
  40186a:	4605      	mov	r5, r0
  40186c:	460c      	mov	r4, r1
  40186e:	a906      	add	r1, sp, #24
  401870:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  401874:	2002      	movs	r0, #2
  401876:	4b1d      	ldr	r3, [pc, #116]	; (4018ec <RTC_init+0x88>)
  401878:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  40187a:	2100      	movs	r1, #0
  40187c:	4628      	mov	r0, r5
  40187e:	4b1c      	ldr	r3, [pc, #112]	; (4018f0 <RTC_init+0x8c>)
  401880:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401882:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401884:	9300      	str	r3, [sp, #0]
  401886:	9b08      	ldr	r3, [sp, #32]
  401888:	9a07      	ldr	r2, [sp, #28]
  40188a:	9906      	ldr	r1, [sp, #24]
  40188c:	4628      	mov	r0, r5
  40188e:	4e19      	ldr	r6, [pc, #100]	; (4018f4 <RTC_init+0x90>)
  401890:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  401892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401896:	990a      	ldr	r1, [sp, #40]	; 0x28
  401898:	4628      	mov	r0, r5
  40189a:	4e17      	ldr	r6, [pc, #92]	; (4018f8 <RTC_init+0x94>)
  40189c:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  40189e:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4018a0:	b2e4      	uxtb	r4, r4
  4018a2:	f004 011f 	and.w	r1, r4, #31
  4018a6:	2301      	movs	r3, #1
  4018a8:	408b      	lsls	r3, r1
  4018aa:	0956      	lsrs	r6, r2, #5
  4018ac:	4813      	ldr	r0, [pc, #76]	; (4018fc <RTC_init+0x98>)
  4018ae:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  4018b2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4018b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  4018ba:	2a00      	cmp	r2, #0
  4018bc:	db0f      	blt.n	4018de <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4018be:	490f      	ldr	r1, [pc, #60]	; (4018fc <RTC_init+0x98>)
  4018c0:	4411      	add	r1, r2
  4018c2:	2200      	movs	r2, #0
  4018c4:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4018c8:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 0);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  4018cc:	990d      	ldr	r1, [sp, #52]	; 0x34
  4018ce:	4628      	mov	r0, r5
  4018d0:	4b0b      	ldr	r3, [pc, #44]	; (401900 <RTC_init+0x9c>)
  4018d2:	4798      	blx	r3
}
  4018d4:	b002      	add	sp, #8
  4018d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4018da:	b002      	add	sp, #8
  4018dc:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4018de:	f004 040f 	and.w	r4, r4, #15
  4018e2:	4a08      	ldr	r2, [pc, #32]	; (401904 <RTC_init+0xa0>)
  4018e4:	2100      	movs	r1, #0
  4018e6:	5511      	strb	r1, [r2, r4]
  4018e8:	e7ee      	b.n	4018c8 <RTC_init+0x64>
  4018ea:	bf00      	nop
  4018ec:	0040117d 	.word	0x0040117d
  4018f0:	004001ad 	.word	0x004001ad
  4018f4:	004002ed 	.word	0x004002ed
  4018f8:	004001c9 	.word	0x004001c9
  4018fc:	e000e100 	.word	0xe000e100
  401900:	004001c3 	.word	0x004001c3
  401904:	e000ed14 	.word	0xe000ed14

00401908 <RTC_Handler>:

void RTC_Handler(void){
  401908:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40190a:	4813      	ldr	r0, [pc, #76]	; (401958 <RTC_Handler+0x50>)
  40190c:	4b13      	ldr	r3, [pc, #76]	; (40195c <RTC_Handler+0x54>)
  40190e:	4798      	blx	r3
  401910:	4604      	mov	r4, r0
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  401912:	f010 0f04 	tst.w	r0, #4
  401916:	d111      	bne.n	40193c <RTC_Handler+0x34>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401918:	f014 0f02 	tst.w	r4, #2
  40191c:	d113      	bne.n	401946 <RTC_Handler+0x3e>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
      flag_rtc = 1;
	}
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40191e:	4d0e      	ldr	r5, [pc, #56]	; (401958 <RTC_Handler+0x50>)
  401920:	2101      	movs	r1, #1
  401922:	4628      	mov	r0, r5
  401924:	4c0e      	ldr	r4, [pc, #56]	; (401960 <RTC_Handler+0x58>)
  401926:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  401928:	2108      	movs	r1, #8
  40192a:	4628      	mov	r0, r5
  40192c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40192e:	2110      	movs	r1, #16
  401930:	4628      	mov	r0, r5
  401932:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401934:	2120      	movs	r1, #32
  401936:	4628      	mov	r0, r5
  401938:	47a0      	blx	r4
  40193a:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  40193c:	2104      	movs	r1, #4
  40193e:	4806      	ldr	r0, [pc, #24]	; (401958 <RTC_Handler+0x50>)
  401940:	4b07      	ldr	r3, [pc, #28]	; (401960 <RTC_Handler+0x58>)
  401942:	4798      	blx	r3
  401944:	e7e8      	b.n	401918 <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401946:	2102      	movs	r1, #2
  401948:	4803      	ldr	r0, [pc, #12]	; (401958 <RTC_Handler+0x50>)
  40194a:	4b05      	ldr	r3, [pc, #20]	; (401960 <RTC_Handler+0x58>)
  40194c:	4798      	blx	r3
      flag_rtc = 1;
  40194e:	2201      	movs	r2, #1
  401950:	4b04      	ldr	r3, [pc, #16]	; (401964 <RTC_Handler+0x5c>)
  401952:	701a      	strb	r2, [r3, #0]
  401954:	e7e3      	b.n	40191e <RTC_Handler+0x16>
  401956:	bf00      	nop
  401958:	400e1860 	.word	0x400e1860
  40195c:	00400405 	.word	0x00400405
  401960:	00400409 	.word	0x00400409
  401964:	204006f0 	.word	0x204006f0

00401968 <pin_toggle>:
}

void pin_toggle(Pio *pio, uint32_t mask){
  401968:	b538      	push	{r3, r4, r5, lr}
  40196a:	4604      	mov	r4, r0
  40196c:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  40196e:	4b06      	ldr	r3, [pc, #24]	; (401988 <pin_toggle+0x20>)
  401970:	4798      	blx	r3
  401972:	b920      	cbnz	r0, 40197e <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  401974:	4629      	mov	r1, r5
  401976:	4620      	mov	r0, r4
  401978:	4b04      	ldr	r3, [pc, #16]	; (40198c <pin_toggle+0x24>)
  40197a:	4798      	blx	r3
  40197c:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  40197e:	4629      	mov	r1, r5
  401980:	4620      	mov	r0, r4
  401982:	4b03      	ldr	r3, [pc, #12]	; (401990 <pin_toggle+0x28>)
  401984:	4798      	blx	r3
  401986:	bd38      	pop	{r3, r4, r5, pc}
  401988:	00400f95 	.word	0x00400f95
  40198c:	00400e0d 	.word	0x00400e0d
  401990:	00400e11 	.word	0x00400e11

00401994 <pisca_led>:
}

void pisca_led(int n, int t){
  401994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401998:	f1b0 0800 	subs.w	r8, r0, #0
  40199c:	dd33      	ble.n	401a06 <pisca_led+0x72>
  40199e:	460f      	mov	r7, r1
		pio_clear(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
		delay_ms(t);
  4019a0:	17cd      	asrs	r5, r1, #31
  4019a2:	4b1a      	ldr	r3, [pc, #104]	; (401a0c <pisca_led+0x78>)
  4019a4:	fba1 0103 	umull	r0, r1, r1, r3
  4019a8:	fb03 1105 	mla	r1, r3, r5, r1
  4019ac:	f241 722c 	movw	r2, #5932	; 0x172c
  4019b0:	2300      	movs	r3, #0
  4019b2:	f241 742b 	movw	r4, #5931	; 0x172b
  4019b6:	2500      	movs	r5, #0
  4019b8:	1900      	adds	r0, r0, r4
  4019ba:	4169      	adcs	r1, r5
  4019bc:	4c14      	ldr	r4, [pc, #80]	; (401a10 <pisca_led+0x7c>)
  4019be:	47a0      	blx	r4
  4019c0:	4682      	mov	sl, r0
  4019c2:	2400      	movs	r4, #0
		pio_clear(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4019c4:	4e13      	ldr	r6, [pc, #76]	; (401a14 <pisca_led+0x80>)
  4019c6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401a20 <pisca_led+0x8c>
		delay_ms(t);
  4019ca:	4d13      	ldr	r5, [pc, #76]	; (401a18 <pisca_led+0x84>)
  4019cc:	e00b      	b.n	4019e6 <pisca_led+0x52>
  4019ce:	2033      	movs	r0, #51	; 0x33
  4019d0:	47a8      	blx	r5
		pio_set(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4019d2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019d6:	4630      	mov	r0, r6
  4019d8:	4b10      	ldr	r3, [pc, #64]	; (401a1c <pisca_led+0x88>)
  4019da:	4798      	blx	r3
		delay_ms(t);
  4019dc:	2033      	movs	r0, #51	; 0x33
  4019de:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  4019e0:	3401      	adds	r4, #1
  4019e2:	45a0      	cmp	r8, r4
  4019e4:	d00f      	beq.n	401a06 <pisca_led+0x72>
		pio_clear(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4019e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019ea:	4630      	mov	r0, r6
  4019ec:	47c8      	blx	r9
		delay_ms(t);
  4019ee:	2f00      	cmp	r7, #0
  4019f0:	d0ed      	beq.n	4019ce <pisca_led+0x3a>
  4019f2:	4650      	mov	r0, sl
  4019f4:	47a8      	blx	r5
		pio_set(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019fa:	4630      	mov	r0, r6
  4019fc:	4b07      	ldr	r3, [pc, #28]	; (401a1c <pisca_led+0x88>)
  4019fe:	4798      	blx	r3
		delay_ms(t);
  401a00:	4650      	mov	r0, sl
  401a02:	47a8      	blx	r5
  401a04:	e7ec      	b.n	4019e0 <pisca_led+0x4c>
  401a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a0a:	bf00      	nop
  401a0c:	11e1a300 	.word	0x11e1a300
  401a10:	00401bf9 	.word	0x00401bf9
  401a14:	400e1200 	.word	0x400e1200
  401a18:	20400001 	.word	0x20400001
  401a1c:	00400e0d 	.word	0x00400e0d
  401a20:	00400e11 	.word	0x00400e11

00401a24 <main>:
	}
}


int main (void){
  401a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a28:	b08e      	sub	sp, #56	; 0x38
	board_init();
  401a2a:	4b53      	ldr	r3, [pc, #332]	; (401b78 <main+0x154>)
  401a2c:	4798      	blx	r3
	sysclk_init();
  401a2e:	4b53      	ldr	r3, [pc, #332]	; (401b7c <main+0x158>)
  401a30:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  401a32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a36:	4b52      	ldr	r3, [pc, #328]	; (401b80 <main+0x15c>)
  401a38:	605a      	str	r2, [r3, #4]
	io_init();
  401a3a:	4b52      	ldr	r3, [pc, #328]	; (401b84 <main+0x160>)
  401a3c:	4798      	blx	r3
	delay_init();
	
	TC_init(TC0, ID_TC1, 1, 4);
  401a3e:	4d52      	ldr	r5, [pc, #328]	; (401b88 <main+0x164>)
  401a40:	2304      	movs	r3, #4
  401a42:	2201      	movs	r2, #1
  401a44:	2118      	movs	r1, #24
  401a46:	4628      	mov	r0, r5
  401a48:	4c50      	ldr	r4, [pc, #320]	; (401b8c <main+0x168>)
  401a4a:	47a0      	blx	r4
	TC_init(TC0, ID_TC0, 0, 5);
  401a4c:	2305      	movs	r3, #5
  401a4e:	2200      	movs	r2, #0
  401a50:	2117      	movs	r1, #23
  401a52:	4628      	mov	r0, r5
  401a54:	47a0      	blx	r4
	
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401a56:	ac07      	add	r4, sp, #28
  401a58:	4d4d      	ldr	r5, [pc, #308]	; (401b90 <main+0x16c>)
  401a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  401a66:	4e4b      	ldr	r6, [pc, #300]	; (401b94 <main+0x170>)
  401a68:	2702      	movs	r7, #2
  401a6a:	9705      	str	r7, [sp, #20]
  401a6c:	466c      	mov	r4, sp
  401a6e:	ad09      	add	r5, sp, #36	; 0x24
  401a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401a74:	682b      	ldr	r3, [r5, #0]
  401a76:	6023      	str	r3, [r4, #0]
  401a78:	ab07      	add	r3, sp, #28
  401a7a:	cb0c      	ldmia	r3, {r2, r3}
  401a7c:	4639      	mov	r1, r7
  401a7e:	4630      	mov	r0, r6
  401a80:	4c45      	ldr	r4, [pc, #276]	; (401b98 <main+0x174>)
  401a82:	47a0      	blx	r4
	rtc_set_date_alarm(RTC, 1, rtc_initial.month, 1, rtc_initial.day);
  401a84:	2313      	movs	r3, #19
  401a86:	9300      	str	r3, [sp, #0]
  401a88:	2301      	movs	r3, #1
  401a8a:	2203      	movs	r2, #3
  401a8c:	4619      	mov	r1, r3
  401a8e:	4630      	mov	r0, r6
  401a90:	4c42      	ldr	r4, [pc, #264]	; (401b9c <main+0x178>)
  401a92:	47a0      	blx	r4
	rtc_set_time_alarm(RTC, 1, rtc_initial.hour, 1, rtc_initial.minute, 1, rtc_initial.seccond + 20);
  401a94:	2315      	movs	r3, #21
  401a96:	9302      	str	r3, [sp, #8]
  401a98:	2101      	movs	r1, #1
  401a9a:	9101      	str	r1, [sp, #4]
  401a9c:	232d      	movs	r3, #45	; 0x2d
  401a9e:	9300      	str	r3, [sp, #0]
  401aa0:	460b      	mov	r3, r1
  401aa2:	220f      	movs	r2, #15
  401aa4:	4630      	mov	r0, r6
  401aa6:	4c3e      	ldr	r4, [pc, #248]	; (401ba0 <main+0x17c>)
  401aa8:	47a0      	blx	r4
	
	gfx_mono_ssd1306_init();
  401aaa:	4b3e      	ldr	r3, [pc, #248]	; (401ba4 <main+0x180>)
  401aac:	4798      	blx	r3
	gfx_mono_draw_string("mundo", 50,16, &sysfont);
  401aae:	4b3e      	ldr	r3, [pc, #248]	; (401ba8 <main+0x184>)
  401ab0:	2210      	movs	r2, #16
  401ab2:	2132      	movs	r1, #50	; 0x32
  401ab4:	483d      	ldr	r0, [pc, #244]	; (401bac <main+0x188>)
  401ab6:	4c3e      	ldr	r4, [pc, #248]	; (401bb0 <main+0x18c>)
  401ab8:	47a0      	blx	r4

	while(1) {
		if(flag_tc){
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
  401aba:	f8df 8138 	ldr.w	r8, [pc, #312]	; 401bf4 <main+0x1d0>
		if(flag_tc0){
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
			flag_tc0 = 0;
		}
		if (flag_rtt){
		  pin_toggle(LED2_PIO, LED2_IDX_MASK);
  401abe:	4f3d      	ldr	r7, [pc, #244]	; (401bb4 <main+0x190>)
	rtt_sel_source(RTT, false);
  401ac0:	4c3d      	ldr	r4, [pc, #244]	; (401bb8 <main+0x194>)
  401ac2:	e040      	b.n	401b46 <main+0x122>
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
  401ac4:	2101      	movs	r1, #1
  401ac6:	4640      	mov	r0, r8
  401ac8:	4b3c      	ldr	r3, [pc, #240]	; (401bbc <main+0x198>)
  401aca:	4798      	blx	r3
			flag_tc = 0;
  401acc:	2200      	movs	r2, #0
  401ace:	4b3c      	ldr	r3, [pc, #240]	; (401bc0 <main+0x19c>)
  401ad0:	701a      	strb	r2, [r3, #0]
  401ad2:	e03c      	b.n	401b4e <main+0x12a>
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
  401ad4:	2104      	movs	r1, #4
  401ad6:	483b      	ldr	r0, [pc, #236]	; (401bc4 <main+0x1a0>)
  401ad8:	4b38      	ldr	r3, [pc, #224]	; (401bbc <main+0x198>)
  401ada:	4798      	blx	r3
			flag_tc0 = 0;
  401adc:	2200      	movs	r2, #0
  401ade:	4b3a      	ldr	r3, [pc, #232]	; (401bc8 <main+0x1a4>)
  401ae0:	701a      	strb	r2, [r3, #0]
  401ae2:	e038      	b.n	401b56 <main+0x132>
		  pin_toggle(LED2_PIO, LED2_IDX_MASK);
  401ae4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ae8:	4638      	mov	r0, r7
  401aea:	4b34      	ldr	r3, [pc, #208]	; (401bbc <main+0x198>)
  401aec:	4798      	blx	r3
	rtt_sel_source(RTT, false);
  401aee:	2100      	movs	r1, #0
  401af0:	4620      	mov	r0, r4
  401af2:	4b36      	ldr	r3, [pc, #216]	; (401bcc <main+0x1a8>)
  401af4:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  401af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401afa:	4620      	mov	r0, r4
  401afc:	4b34      	ldr	r3, [pc, #208]	; (401bd0 <main+0x1ac>)
  401afe:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  401b00:	4620      	mov	r0, r4
  401b02:	4b34      	ldr	r3, [pc, #208]	; (401bd4 <main+0x1b0>)
  401b04:	4798      	blx	r3
  401b06:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  401b08:	4e32      	ldr	r6, [pc, #200]	; (401bd4 <main+0x1b0>)
  401b0a:	4620      	mov	r0, r4
  401b0c:	47b0      	blx	r6
  401b0e:	4285      	cmp	r5, r0
  401b10:	d0fb      	beq.n	401b0a <main+0xe6>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401b12:	f105 0110 	add.w	r1, r5, #16
  401b16:	4620      	mov	r0, r4
  401b18:	4b2f      	ldr	r3, [pc, #188]	; (401bd8 <main+0x1b4>)
  401b1a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401b1c:	4b2f      	ldr	r3, [pc, #188]	; (401bdc <main+0x1b8>)
  401b1e:	2208      	movs	r2, #8
  401b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b28:	2500      	movs	r5, #0
  401b2a:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b2e:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401b30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401b34:	4620      	mov	r0, r4
  401b36:	4b2a      	ldr	r3, [pc, #168]	; (401be0 <main+0x1bc>)
  401b38:	4798      	blx	r3
		  uint16_t pllPreScale = (int) (((float) 32768) / 4.0);
		  uint32_t irqRTTvalue = 16;

		  RTT_init(pllPreScale, irqRTTvalue);         
      
		  flag_rtt = 0;
  401b3a:	4b2a      	ldr	r3, [pc, #168]	; (401be4 <main+0x1c0>)
  401b3c:	701d      	strb	r5, [r3, #0]
  401b3e:	e00e      	b.n	401b5e <main+0x13a>
		}
		if(flag_rtc){
			pisca_led(5, 50);
			flag_rtc = 0;
		}
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401b40:	2002      	movs	r0, #2
  401b42:	4b29      	ldr	r3, [pc, #164]	; (401be8 <main+0x1c4>)
  401b44:	4798      	blx	r3
		if(flag_tc){
  401b46:	4b1e      	ldr	r3, [pc, #120]	; (401bc0 <main+0x19c>)
  401b48:	781b      	ldrb	r3, [r3, #0]
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	d1ba      	bne.n	401ac4 <main+0xa0>
		if(flag_tc0){
  401b4e:	4b1e      	ldr	r3, [pc, #120]	; (401bc8 <main+0x1a4>)
  401b50:	781b      	ldrb	r3, [r3, #0]
  401b52:	2b00      	cmp	r3, #0
  401b54:	d1be      	bne.n	401ad4 <main+0xb0>
		if (flag_rtt){
  401b56:	4b23      	ldr	r3, [pc, #140]	; (401be4 <main+0x1c0>)
  401b58:	781b      	ldrb	r3, [r3, #0]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d1c2      	bne.n	401ae4 <main+0xc0>
		if(flag_rtc){
  401b5e:	4b23      	ldr	r3, [pc, #140]	; (401bec <main+0x1c8>)
  401b60:	781b      	ldrb	r3, [r3, #0]
  401b62:	2b00      	cmp	r3, #0
  401b64:	d0ec      	beq.n	401b40 <main+0x11c>
			pisca_led(5, 50);
  401b66:	2132      	movs	r1, #50	; 0x32
  401b68:	2005      	movs	r0, #5
  401b6a:	4b21      	ldr	r3, [pc, #132]	; (401bf0 <main+0x1cc>)
  401b6c:	4798      	blx	r3
			flag_rtc = 0;
  401b6e:	2200      	movs	r2, #0
  401b70:	4b1e      	ldr	r3, [pc, #120]	; (401bec <main+0x1c8>)
  401b72:	701a      	strb	r2, [r3, #0]
  401b74:	e7e4      	b.n	401b40 <main+0x11c>
  401b76:	bf00      	nop
  401b78:	00400ccd 	.word	0x00400ccd
  401b7c:	00400c5d 	.word	0x00400c5d
  401b80:	400e1850 	.word	0x400e1850
  401b84:	004016f9 	.word	0x004016f9
  401b88:	4000c000 	.word	0x4000c000
  401b8c:	0040175d 	.word	0x0040175d
  401b90:	00402ac0 	.word	0x00402ac0
  401b94:	400e1860 	.word	0x400e1860
  401b98:	00401865 	.word	0x00401865
  401b9c:	004003a5 	.word	0x004003a5
  401ba0:	00400259 	.word	0x00400259
  401ba4:	0040093d 	.word	0x0040093d
  401ba8:	2040000c 	.word	0x2040000c
  401bac:	00402adc 	.word	0x00402adc
  401bb0:	004008a5 	.word	0x004008a5
  401bb4:	400e1200 	.word	0x400e1200
  401bb8:	400e1830 	.word	0x400e1830
  401bbc:	00401969 	.word	0x00401969
  401bc0:	204006f1 	.word	0x204006f1
  401bc4:	400e1000 	.word	0x400e1000
  401bc8:	204006f2 	.word	0x204006f2
  401bcc:	00400421 	.word	0x00400421
  401bd0:	0040040d 	.word	0x0040040d
  401bd4:	00400475 	.word	0x00400475
  401bd8:	0040048d 	.word	0x0040048d
  401bdc:	e000e100 	.word	0xe000e100
  401be0:	0040044d 	.word	0x0040044d
  401be4:	20400020 	.word	0x20400020
  401be8:	00401221 	.word	0x00401221
  401bec:	204006f0 	.word	0x204006f0
  401bf0:	00401995 	.word	0x00401995
  401bf4:	400e0e00 	.word	0x400e0e00

00401bf8 <__aeabi_uldivmod>:
  401bf8:	b953      	cbnz	r3, 401c10 <__aeabi_uldivmod+0x18>
  401bfa:	b94a      	cbnz	r2, 401c10 <__aeabi_uldivmod+0x18>
  401bfc:	2900      	cmp	r1, #0
  401bfe:	bf08      	it	eq
  401c00:	2800      	cmpeq	r0, #0
  401c02:	bf1c      	itt	ne
  401c04:	f04f 31ff 	movne.w	r1, #4294967295
  401c08:	f04f 30ff 	movne.w	r0, #4294967295
  401c0c:	f000 b97a 	b.w	401f04 <__aeabi_idiv0>
  401c10:	f1ad 0c08 	sub.w	ip, sp, #8
  401c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401c18:	f000 f806 	bl	401c28 <__udivmoddi4>
  401c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  401c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401c24:	b004      	add	sp, #16
  401c26:	4770      	bx	lr

00401c28 <__udivmoddi4>:
  401c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c2c:	468c      	mov	ip, r1
  401c2e:	460d      	mov	r5, r1
  401c30:	4604      	mov	r4, r0
  401c32:	9e08      	ldr	r6, [sp, #32]
  401c34:	2b00      	cmp	r3, #0
  401c36:	d151      	bne.n	401cdc <__udivmoddi4+0xb4>
  401c38:	428a      	cmp	r2, r1
  401c3a:	4617      	mov	r7, r2
  401c3c:	d96d      	bls.n	401d1a <__udivmoddi4+0xf2>
  401c3e:	fab2 fe82 	clz	lr, r2
  401c42:	f1be 0f00 	cmp.w	lr, #0
  401c46:	d00b      	beq.n	401c60 <__udivmoddi4+0x38>
  401c48:	f1ce 0c20 	rsb	ip, lr, #32
  401c4c:	fa01 f50e 	lsl.w	r5, r1, lr
  401c50:	fa20 fc0c 	lsr.w	ip, r0, ip
  401c54:	fa02 f70e 	lsl.w	r7, r2, lr
  401c58:	ea4c 0c05 	orr.w	ip, ip, r5
  401c5c:	fa00 f40e 	lsl.w	r4, r0, lr
  401c60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401c64:	0c25      	lsrs	r5, r4, #16
  401c66:	fbbc f8fa 	udiv	r8, ip, sl
  401c6a:	fa1f f987 	uxth.w	r9, r7
  401c6e:	fb0a cc18 	mls	ip, sl, r8, ip
  401c72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401c76:	fb08 f309 	mul.w	r3, r8, r9
  401c7a:	42ab      	cmp	r3, r5
  401c7c:	d90a      	bls.n	401c94 <__udivmoddi4+0x6c>
  401c7e:	19ed      	adds	r5, r5, r7
  401c80:	f108 32ff 	add.w	r2, r8, #4294967295
  401c84:	f080 8123 	bcs.w	401ece <__udivmoddi4+0x2a6>
  401c88:	42ab      	cmp	r3, r5
  401c8a:	f240 8120 	bls.w	401ece <__udivmoddi4+0x2a6>
  401c8e:	f1a8 0802 	sub.w	r8, r8, #2
  401c92:	443d      	add	r5, r7
  401c94:	1aed      	subs	r5, r5, r3
  401c96:	b2a4      	uxth	r4, r4
  401c98:	fbb5 f0fa 	udiv	r0, r5, sl
  401c9c:	fb0a 5510 	mls	r5, sl, r0, r5
  401ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401ca4:	fb00 f909 	mul.w	r9, r0, r9
  401ca8:	45a1      	cmp	r9, r4
  401caa:	d909      	bls.n	401cc0 <__udivmoddi4+0x98>
  401cac:	19e4      	adds	r4, r4, r7
  401cae:	f100 33ff 	add.w	r3, r0, #4294967295
  401cb2:	f080 810a 	bcs.w	401eca <__udivmoddi4+0x2a2>
  401cb6:	45a1      	cmp	r9, r4
  401cb8:	f240 8107 	bls.w	401eca <__udivmoddi4+0x2a2>
  401cbc:	3802      	subs	r0, #2
  401cbe:	443c      	add	r4, r7
  401cc0:	eba4 0409 	sub.w	r4, r4, r9
  401cc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401cc8:	2100      	movs	r1, #0
  401cca:	2e00      	cmp	r6, #0
  401ccc:	d061      	beq.n	401d92 <__udivmoddi4+0x16a>
  401cce:	fa24 f40e 	lsr.w	r4, r4, lr
  401cd2:	2300      	movs	r3, #0
  401cd4:	6034      	str	r4, [r6, #0]
  401cd6:	6073      	str	r3, [r6, #4]
  401cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401cdc:	428b      	cmp	r3, r1
  401cde:	d907      	bls.n	401cf0 <__udivmoddi4+0xc8>
  401ce0:	2e00      	cmp	r6, #0
  401ce2:	d054      	beq.n	401d8e <__udivmoddi4+0x166>
  401ce4:	2100      	movs	r1, #0
  401ce6:	e886 0021 	stmia.w	r6, {r0, r5}
  401cea:	4608      	mov	r0, r1
  401cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401cf0:	fab3 f183 	clz	r1, r3
  401cf4:	2900      	cmp	r1, #0
  401cf6:	f040 808e 	bne.w	401e16 <__udivmoddi4+0x1ee>
  401cfa:	42ab      	cmp	r3, r5
  401cfc:	d302      	bcc.n	401d04 <__udivmoddi4+0xdc>
  401cfe:	4282      	cmp	r2, r0
  401d00:	f200 80fa 	bhi.w	401ef8 <__udivmoddi4+0x2d0>
  401d04:	1a84      	subs	r4, r0, r2
  401d06:	eb65 0503 	sbc.w	r5, r5, r3
  401d0a:	2001      	movs	r0, #1
  401d0c:	46ac      	mov	ip, r5
  401d0e:	2e00      	cmp	r6, #0
  401d10:	d03f      	beq.n	401d92 <__udivmoddi4+0x16a>
  401d12:	e886 1010 	stmia.w	r6, {r4, ip}
  401d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d1a:	b912      	cbnz	r2, 401d22 <__udivmoddi4+0xfa>
  401d1c:	2701      	movs	r7, #1
  401d1e:	fbb7 f7f2 	udiv	r7, r7, r2
  401d22:	fab7 fe87 	clz	lr, r7
  401d26:	f1be 0f00 	cmp.w	lr, #0
  401d2a:	d134      	bne.n	401d96 <__udivmoddi4+0x16e>
  401d2c:	1beb      	subs	r3, r5, r7
  401d2e:	0c3a      	lsrs	r2, r7, #16
  401d30:	fa1f fc87 	uxth.w	ip, r7
  401d34:	2101      	movs	r1, #1
  401d36:	fbb3 f8f2 	udiv	r8, r3, r2
  401d3a:	0c25      	lsrs	r5, r4, #16
  401d3c:	fb02 3318 	mls	r3, r2, r8, r3
  401d40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401d44:	fb0c f308 	mul.w	r3, ip, r8
  401d48:	42ab      	cmp	r3, r5
  401d4a:	d907      	bls.n	401d5c <__udivmoddi4+0x134>
  401d4c:	19ed      	adds	r5, r5, r7
  401d4e:	f108 30ff 	add.w	r0, r8, #4294967295
  401d52:	d202      	bcs.n	401d5a <__udivmoddi4+0x132>
  401d54:	42ab      	cmp	r3, r5
  401d56:	f200 80d1 	bhi.w	401efc <__udivmoddi4+0x2d4>
  401d5a:	4680      	mov	r8, r0
  401d5c:	1aed      	subs	r5, r5, r3
  401d5e:	b2a3      	uxth	r3, r4
  401d60:	fbb5 f0f2 	udiv	r0, r5, r2
  401d64:	fb02 5510 	mls	r5, r2, r0, r5
  401d68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401d6c:	fb0c fc00 	mul.w	ip, ip, r0
  401d70:	45a4      	cmp	ip, r4
  401d72:	d907      	bls.n	401d84 <__udivmoddi4+0x15c>
  401d74:	19e4      	adds	r4, r4, r7
  401d76:	f100 33ff 	add.w	r3, r0, #4294967295
  401d7a:	d202      	bcs.n	401d82 <__udivmoddi4+0x15a>
  401d7c:	45a4      	cmp	ip, r4
  401d7e:	f200 80b8 	bhi.w	401ef2 <__udivmoddi4+0x2ca>
  401d82:	4618      	mov	r0, r3
  401d84:	eba4 040c 	sub.w	r4, r4, ip
  401d88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401d8c:	e79d      	b.n	401cca <__udivmoddi4+0xa2>
  401d8e:	4631      	mov	r1, r6
  401d90:	4630      	mov	r0, r6
  401d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d96:	f1ce 0420 	rsb	r4, lr, #32
  401d9a:	fa05 f30e 	lsl.w	r3, r5, lr
  401d9e:	fa07 f70e 	lsl.w	r7, r7, lr
  401da2:	fa20 f804 	lsr.w	r8, r0, r4
  401da6:	0c3a      	lsrs	r2, r7, #16
  401da8:	fa25 f404 	lsr.w	r4, r5, r4
  401dac:	ea48 0803 	orr.w	r8, r8, r3
  401db0:	fbb4 f1f2 	udiv	r1, r4, r2
  401db4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401db8:	fb02 4411 	mls	r4, r2, r1, r4
  401dbc:	fa1f fc87 	uxth.w	ip, r7
  401dc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401dc4:	fb01 f30c 	mul.w	r3, r1, ip
  401dc8:	42ab      	cmp	r3, r5
  401dca:	fa00 f40e 	lsl.w	r4, r0, lr
  401dce:	d909      	bls.n	401de4 <__udivmoddi4+0x1bc>
  401dd0:	19ed      	adds	r5, r5, r7
  401dd2:	f101 30ff 	add.w	r0, r1, #4294967295
  401dd6:	f080 808a 	bcs.w	401eee <__udivmoddi4+0x2c6>
  401dda:	42ab      	cmp	r3, r5
  401ddc:	f240 8087 	bls.w	401eee <__udivmoddi4+0x2c6>
  401de0:	3902      	subs	r1, #2
  401de2:	443d      	add	r5, r7
  401de4:	1aeb      	subs	r3, r5, r3
  401de6:	fa1f f588 	uxth.w	r5, r8
  401dea:	fbb3 f0f2 	udiv	r0, r3, r2
  401dee:	fb02 3310 	mls	r3, r2, r0, r3
  401df2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401df6:	fb00 f30c 	mul.w	r3, r0, ip
  401dfa:	42ab      	cmp	r3, r5
  401dfc:	d907      	bls.n	401e0e <__udivmoddi4+0x1e6>
  401dfe:	19ed      	adds	r5, r5, r7
  401e00:	f100 38ff 	add.w	r8, r0, #4294967295
  401e04:	d26f      	bcs.n	401ee6 <__udivmoddi4+0x2be>
  401e06:	42ab      	cmp	r3, r5
  401e08:	d96d      	bls.n	401ee6 <__udivmoddi4+0x2be>
  401e0a:	3802      	subs	r0, #2
  401e0c:	443d      	add	r5, r7
  401e0e:	1aeb      	subs	r3, r5, r3
  401e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401e14:	e78f      	b.n	401d36 <__udivmoddi4+0x10e>
  401e16:	f1c1 0720 	rsb	r7, r1, #32
  401e1a:	fa22 f807 	lsr.w	r8, r2, r7
  401e1e:	408b      	lsls	r3, r1
  401e20:	fa05 f401 	lsl.w	r4, r5, r1
  401e24:	ea48 0303 	orr.w	r3, r8, r3
  401e28:	fa20 fe07 	lsr.w	lr, r0, r7
  401e2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401e30:	40fd      	lsrs	r5, r7
  401e32:	ea4e 0e04 	orr.w	lr, lr, r4
  401e36:	fbb5 f9fc 	udiv	r9, r5, ip
  401e3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401e3e:	fb0c 5519 	mls	r5, ip, r9, r5
  401e42:	fa1f f883 	uxth.w	r8, r3
  401e46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401e4a:	fb09 f408 	mul.w	r4, r9, r8
  401e4e:	42ac      	cmp	r4, r5
  401e50:	fa02 f201 	lsl.w	r2, r2, r1
  401e54:	fa00 fa01 	lsl.w	sl, r0, r1
  401e58:	d908      	bls.n	401e6c <__udivmoddi4+0x244>
  401e5a:	18ed      	adds	r5, r5, r3
  401e5c:	f109 30ff 	add.w	r0, r9, #4294967295
  401e60:	d243      	bcs.n	401eea <__udivmoddi4+0x2c2>
  401e62:	42ac      	cmp	r4, r5
  401e64:	d941      	bls.n	401eea <__udivmoddi4+0x2c2>
  401e66:	f1a9 0902 	sub.w	r9, r9, #2
  401e6a:	441d      	add	r5, r3
  401e6c:	1b2d      	subs	r5, r5, r4
  401e6e:	fa1f fe8e 	uxth.w	lr, lr
  401e72:	fbb5 f0fc 	udiv	r0, r5, ip
  401e76:	fb0c 5510 	mls	r5, ip, r0, r5
  401e7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401e7e:	fb00 f808 	mul.w	r8, r0, r8
  401e82:	45a0      	cmp	r8, r4
  401e84:	d907      	bls.n	401e96 <__udivmoddi4+0x26e>
  401e86:	18e4      	adds	r4, r4, r3
  401e88:	f100 35ff 	add.w	r5, r0, #4294967295
  401e8c:	d229      	bcs.n	401ee2 <__udivmoddi4+0x2ba>
  401e8e:	45a0      	cmp	r8, r4
  401e90:	d927      	bls.n	401ee2 <__udivmoddi4+0x2ba>
  401e92:	3802      	subs	r0, #2
  401e94:	441c      	add	r4, r3
  401e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401e9a:	eba4 0408 	sub.w	r4, r4, r8
  401e9e:	fba0 8902 	umull	r8, r9, r0, r2
  401ea2:	454c      	cmp	r4, r9
  401ea4:	46c6      	mov	lr, r8
  401ea6:	464d      	mov	r5, r9
  401ea8:	d315      	bcc.n	401ed6 <__udivmoddi4+0x2ae>
  401eaa:	d012      	beq.n	401ed2 <__udivmoddi4+0x2aa>
  401eac:	b156      	cbz	r6, 401ec4 <__udivmoddi4+0x29c>
  401eae:	ebba 030e 	subs.w	r3, sl, lr
  401eb2:	eb64 0405 	sbc.w	r4, r4, r5
  401eb6:	fa04 f707 	lsl.w	r7, r4, r7
  401eba:	40cb      	lsrs	r3, r1
  401ebc:	431f      	orrs	r7, r3
  401ebe:	40cc      	lsrs	r4, r1
  401ec0:	6037      	str	r7, [r6, #0]
  401ec2:	6074      	str	r4, [r6, #4]
  401ec4:	2100      	movs	r1, #0
  401ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401eca:	4618      	mov	r0, r3
  401ecc:	e6f8      	b.n	401cc0 <__udivmoddi4+0x98>
  401ece:	4690      	mov	r8, r2
  401ed0:	e6e0      	b.n	401c94 <__udivmoddi4+0x6c>
  401ed2:	45c2      	cmp	sl, r8
  401ed4:	d2ea      	bcs.n	401eac <__udivmoddi4+0x284>
  401ed6:	ebb8 0e02 	subs.w	lr, r8, r2
  401eda:	eb69 0503 	sbc.w	r5, r9, r3
  401ede:	3801      	subs	r0, #1
  401ee0:	e7e4      	b.n	401eac <__udivmoddi4+0x284>
  401ee2:	4628      	mov	r0, r5
  401ee4:	e7d7      	b.n	401e96 <__udivmoddi4+0x26e>
  401ee6:	4640      	mov	r0, r8
  401ee8:	e791      	b.n	401e0e <__udivmoddi4+0x1e6>
  401eea:	4681      	mov	r9, r0
  401eec:	e7be      	b.n	401e6c <__udivmoddi4+0x244>
  401eee:	4601      	mov	r1, r0
  401ef0:	e778      	b.n	401de4 <__udivmoddi4+0x1bc>
  401ef2:	3802      	subs	r0, #2
  401ef4:	443c      	add	r4, r7
  401ef6:	e745      	b.n	401d84 <__udivmoddi4+0x15c>
  401ef8:	4608      	mov	r0, r1
  401efa:	e708      	b.n	401d0e <__udivmoddi4+0xe6>
  401efc:	f1a8 0802 	sub.w	r8, r8, #2
  401f00:	443d      	add	r5, r7
  401f02:	e72b      	b.n	401d5c <__udivmoddi4+0x134>

00401f04 <__aeabi_idiv0>:
  401f04:	4770      	bx	lr
  401f06:	bf00      	nop

00401f08 <__libc_init_array>:
  401f08:	b570      	push	{r4, r5, r6, lr}
  401f0a:	4e0f      	ldr	r6, [pc, #60]	; (401f48 <__libc_init_array+0x40>)
  401f0c:	4d0f      	ldr	r5, [pc, #60]	; (401f4c <__libc_init_array+0x44>)
  401f0e:	1b76      	subs	r6, r6, r5
  401f10:	10b6      	asrs	r6, r6, #2
  401f12:	bf18      	it	ne
  401f14:	2400      	movne	r4, #0
  401f16:	d005      	beq.n	401f24 <__libc_init_array+0x1c>
  401f18:	3401      	adds	r4, #1
  401f1a:	f855 3b04 	ldr.w	r3, [r5], #4
  401f1e:	4798      	blx	r3
  401f20:	42a6      	cmp	r6, r4
  401f22:	d1f9      	bne.n	401f18 <__libc_init_array+0x10>
  401f24:	4e0a      	ldr	r6, [pc, #40]	; (401f50 <__libc_init_array+0x48>)
  401f26:	4d0b      	ldr	r5, [pc, #44]	; (401f54 <__libc_init_array+0x4c>)
  401f28:	1b76      	subs	r6, r6, r5
  401f2a:	f000 fddd 	bl	402ae8 <_init>
  401f2e:	10b6      	asrs	r6, r6, #2
  401f30:	bf18      	it	ne
  401f32:	2400      	movne	r4, #0
  401f34:	d006      	beq.n	401f44 <__libc_init_array+0x3c>
  401f36:	3401      	adds	r4, #1
  401f38:	f855 3b04 	ldr.w	r3, [r5], #4
  401f3c:	4798      	blx	r3
  401f3e:	42a6      	cmp	r6, r4
  401f40:	d1f9      	bne.n	401f36 <__libc_init_array+0x2e>
  401f42:	bd70      	pop	{r4, r5, r6, pc}
  401f44:	bd70      	pop	{r4, r5, r6, pc}
  401f46:	bf00      	nop
  401f48:	00402af4 	.word	0x00402af4
  401f4c:	00402af4 	.word	0x00402af4
  401f50:	00402afc 	.word	0x00402afc
  401f54:	00402af4 	.word	0x00402af4

00401f58 <register_fini>:
  401f58:	4b02      	ldr	r3, [pc, #8]	; (401f64 <register_fini+0xc>)
  401f5a:	b113      	cbz	r3, 401f62 <register_fini+0xa>
  401f5c:	4802      	ldr	r0, [pc, #8]	; (401f68 <register_fini+0x10>)
  401f5e:	f000 b805 	b.w	401f6c <atexit>
  401f62:	4770      	bx	lr
  401f64:	00000000 	.word	0x00000000
  401f68:	00401f79 	.word	0x00401f79

00401f6c <atexit>:
  401f6c:	2300      	movs	r3, #0
  401f6e:	4601      	mov	r1, r0
  401f70:	461a      	mov	r2, r3
  401f72:	4618      	mov	r0, r3
  401f74:	f000 b81e 	b.w	401fb4 <__register_exitproc>

00401f78 <__libc_fini_array>:
  401f78:	b538      	push	{r3, r4, r5, lr}
  401f7a:	4c0a      	ldr	r4, [pc, #40]	; (401fa4 <__libc_fini_array+0x2c>)
  401f7c:	4d0a      	ldr	r5, [pc, #40]	; (401fa8 <__libc_fini_array+0x30>)
  401f7e:	1b64      	subs	r4, r4, r5
  401f80:	10a4      	asrs	r4, r4, #2
  401f82:	d00a      	beq.n	401f9a <__libc_fini_array+0x22>
  401f84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401f88:	3b01      	subs	r3, #1
  401f8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401f8e:	3c01      	subs	r4, #1
  401f90:	f855 3904 	ldr.w	r3, [r5], #-4
  401f94:	4798      	blx	r3
  401f96:	2c00      	cmp	r4, #0
  401f98:	d1f9      	bne.n	401f8e <__libc_fini_array+0x16>
  401f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401f9e:	f000 bdad 	b.w	402afc <_fini>
  401fa2:	bf00      	nop
  401fa4:	00402b0c 	.word	0x00402b0c
  401fa8:	00402b08 	.word	0x00402b08

00401fac <__retarget_lock_acquire_recursive>:
  401fac:	4770      	bx	lr
  401fae:	bf00      	nop

00401fb0 <__retarget_lock_release_recursive>:
  401fb0:	4770      	bx	lr
  401fb2:	bf00      	nop

00401fb4 <__register_exitproc>:
  401fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401fb8:	4d2c      	ldr	r5, [pc, #176]	; (40206c <__register_exitproc+0xb8>)
  401fba:	4606      	mov	r6, r0
  401fbc:	6828      	ldr	r0, [r5, #0]
  401fbe:	4698      	mov	r8, r3
  401fc0:	460f      	mov	r7, r1
  401fc2:	4691      	mov	r9, r2
  401fc4:	f7ff fff2 	bl	401fac <__retarget_lock_acquire_recursive>
  401fc8:	4b29      	ldr	r3, [pc, #164]	; (402070 <__register_exitproc+0xbc>)
  401fca:	681c      	ldr	r4, [r3, #0]
  401fcc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401fd0:	2b00      	cmp	r3, #0
  401fd2:	d03e      	beq.n	402052 <__register_exitproc+0x9e>
  401fd4:	685a      	ldr	r2, [r3, #4]
  401fd6:	2a1f      	cmp	r2, #31
  401fd8:	dc1c      	bgt.n	402014 <__register_exitproc+0x60>
  401fda:	f102 0e01 	add.w	lr, r2, #1
  401fde:	b176      	cbz	r6, 401ffe <__register_exitproc+0x4a>
  401fe0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401fe4:	2401      	movs	r4, #1
  401fe6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401fea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401fee:	4094      	lsls	r4, r2
  401ff0:	4320      	orrs	r0, r4
  401ff2:	2e02      	cmp	r6, #2
  401ff4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401ff8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401ffc:	d023      	beq.n	402046 <__register_exitproc+0x92>
  401ffe:	3202      	adds	r2, #2
  402000:	f8c3 e004 	str.w	lr, [r3, #4]
  402004:	6828      	ldr	r0, [r5, #0]
  402006:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40200a:	f7ff ffd1 	bl	401fb0 <__retarget_lock_release_recursive>
  40200e:	2000      	movs	r0, #0
  402010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402014:	4b17      	ldr	r3, [pc, #92]	; (402074 <__register_exitproc+0xc0>)
  402016:	b30b      	cbz	r3, 40205c <__register_exitproc+0xa8>
  402018:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40201c:	f3af 8000 	nop.w
  402020:	4603      	mov	r3, r0
  402022:	b1d8      	cbz	r0, 40205c <__register_exitproc+0xa8>
  402024:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402028:	6002      	str	r2, [r0, #0]
  40202a:	2100      	movs	r1, #0
  40202c:	6041      	str	r1, [r0, #4]
  40202e:	460a      	mov	r2, r1
  402030:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402034:	f04f 0e01 	mov.w	lr, #1
  402038:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40203c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402040:	2e00      	cmp	r6, #0
  402042:	d0dc      	beq.n	401ffe <__register_exitproc+0x4a>
  402044:	e7cc      	b.n	401fe0 <__register_exitproc+0x2c>
  402046:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40204a:	430c      	orrs	r4, r1
  40204c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402050:	e7d5      	b.n	401ffe <__register_exitproc+0x4a>
  402052:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402056:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40205a:	e7bb      	b.n	401fd4 <__register_exitproc+0x20>
  40205c:	6828      	ldr	r0, [r5, #0]
  40205e:	f7ff ffa7 	bl	401fb0 <__retarget_lock_release_recursive>
  402062:	f04f 30ff 	mov.w	r0, #4294967295
  402066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40206a:	bf00      	nop
  40206c:	20400450 	.word	0x20400450
  402070:	00402ae4 	.word	0x00402ae4
  402074:	00000000 	.word	0x00000000

00402078 <sysfont_glyphs>:
	...
  402098:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  4020a8:	00000030 00000000 00000000 006c006c     0...........l.l.
  4020b8:	006c006c 00000000 00000000 00000000     l.l.............
	...
  4020d0:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  4020e0:	00000028 00000000 00000000 003c0010     (.............<.
  4020f0:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402108:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402118:	00000088 00000000 00000000 00900060     ............`...
  402128:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  402140:	00100010 00000010 00000000 00000000     ................
	...
  40215c:	00100008 00200020 00200020 00200020     .... . . . . . .
  40216c:	00080010 00000000 00000000 00100020     ............ ...
  40217c:	00080008 00080008 00080008 00200010     .............. .
  40218c:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  4021b4:	00100010 00fe0010 00100010 00000010     ................
	...
  4021dc:	00300010 00000020 00000000 00000000     ..0. ...........
  4021ec:	00000000 007c0000 00000000 00000000     ......|.........
	...
  402210:	00300000 00000030 00000000 00000000     ..0.0...........
  402220:	00080000 00100008 00200010 00400020     .......... . .@.
  402230:	00000040 00000000 00000000 00780000     @.............x.
  402240:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  402258:	00100000 00500030 00100010 00100010     ....0.P.........
  402268:	0000007c 00000000 00000000 00700000     |.............p.
  402278:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  402290:	00700000 00080088 00080030 00880008     ..p.....0.......
  4022a0:	00000070 00000000 00000000 00080000     p...............
  4022b0:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  4022c8:	00780000 00800080 000800f0 00080008     ..x.............
  4022d8:	000000f0 00000000 00000000 00300000     ..............0.
  4022e8:	00800040 008800f0 00880088 00000070     @...........p...
	...
  402300:	00f80000 00100008 00200010 00400020     .......... . .@.
  402310:	00000040 00000000 00000000 00700000     @.............p.
  402320:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  402338:	00700000 00880088 00780088 00100008     ..p.......x.....
  402348:	00000060 00000000 00000000 00000000     `...............
  402358:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  402374:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  402384:	00000040 00000000 00000000 00100008     @...............
  402394:	00400020 00100020 00000008 00000000      .@. ...........
	...
  4023b0:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  4023c8:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  4023e0:	00300000 00080048 00200010 00000000     ..0.H..... .....
  4023f0:	00000020 00000000 00000000 00000000      ...............
  402400:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  402418:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  402428:	00000044 00000000 00000000 00f80000     D...............
  402438:	00840084 008400f8 00840084 000000f8     ................
	...
  402450:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  402460:	0000003c 00000000 00000000 00f00000     <...............
  402470:	00840088 00840084 00880084 000000f0     ................
	...
  402488:	00f80000 00800080 008000f0 00800080     ................
  402498:	000000f8 00000000 00000000 00f80000     ................
  4024a8:	00800080 008000f8 00800080 00000080     ................
	...
  4024c0:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  4024d0:	00000038 00000000 00000000 00880000     8...............
  4024e0:	00880088 008800f8 00880088 00000088     ................
	...
  4024f8:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402508:	000000f8 00000000 00000000 00f80000     ................
  402518:	00080008 00080008 00080008 000000f0     ................
	...
  402530:	00840000 00900088 00d000a0 00840088     ................
  402540:	00000084 00000000 00000000 00800000     ................
  402550:	00800080 00800080 00800080 000000fc     ................
	...
  402568:	00840000 00cc00cc 00b400b4 00840084     ................
  402578:	00000084 00000000 00000000 00840000     ................
  402588:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  4025a0:	00780000 00840084 00840084 00840084     ..x.............
  4025b0:	00000078 00000000 00000000 00f80000     x...............
  4025c0:	00840084 00f80084 00800080 00000080     ................
	...
  4025d8:	00780000 00840084 00840084 00840084     ..x.............
  4025e8:	00200078 00000018 00000000 00f80000     x. .............
  4025f8:	00840084 00f80084 00840088 00000084     ................
	...
  402610:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402620:	000000f8 00000000 00000000 00f80000     ................
  402630:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  402648:	00840000 00840084 00840084 00840084     ................
  402658:	00000078 00000000 00000000 00840000     x...............
  402668:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  402680:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  402690:	00000050 00000000 00000000 00880000     P...............
  4026a0:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4026b8:	00880000 00880088 00500050 00200020     ........P.P. . .
  4026c8:	00000020 00000000 00000000 00fc0000      ...............
  4026d8:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  4026f0:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402700:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402710:	00200020 00100020 00100010 00080008      . . ...........
	...
  402728:	00080038 00080008 00080008 00080008     8...............
  402738:	00080008 00000038 00000000 00280010     ....8.........(.
  402748:	00000044 00000000 00000000 00000000     D...............
	...
  402770:	00000038 00000000 00000000 00200000     8............. .
  402780:	00000010 00000000 00000000 00000000     ................
	...
  40279c:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  4027b4:	00800080 00f80080 00840084 00840084     ................
  4027c4:	000000f8 00000000 00000000 00000000     ................
  4027d4:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  4027ec:	00040004 007c0004 00840084 008c0084     ......|.........
  4027fc:	00000074 00000000 00000000 00000000     t...............
  40280c:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402824:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  402834:	000000fc 00000000 00000000 00000000     ................
  402844:	007c0000 00840084 00840084 0004007c     ..|.........|...
  402854:	00000078 00000000 00800080 00b80080     x...............
  402864:	008400c4 00840084 00000084 00000000     ................
  402874:	00000000 00100000 00700000 00100010     ..........p.....
  402884:	00100010 0000007c 00000000 00000000     ....|...........
  402894:	00080000 00780000 00080008 00080008     ......x.........
  4028a4:	00080008 00700008 00000000 00800080     ......p.........
  4028b4:	00880080 00a00090 008800d0 00000088     ................
	...
  4028cc:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4028dc:	000000f8 00000000 00000000 00000000     ................
  4028ec:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402908:	00b80000 008400c4 00840084 00000084     ................
	...
  402924:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402940:	00b80000 008400c4 00840084 008000f8     ................
  402950:	00000080 00000000 00000000 007c0000     ..............|.
  402960:	00840084 00840084 0004007c 00000004     ........|.......
	...
  402978:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402994:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  4029b0:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  4029cc:	00880000 00880088 00880088 0000007c     ............|...
	...
  4029e8:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402a04:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402a20:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402a3c:	00840000 00480084 00300048 00200010     ......H.H.0... .
  402a4c:	00000040 00000000 00000000 00f80000     @...............
  402a5c:	00100008 00400020 000000f8 00000000     .... .@.........
  402a6c:	00000000 00200010 00100020 00200020     ...... . ... . .
  402a7c:	00200010 00100020 00000000 00000000     .. . ...........
  402a8c:	00100010 00100010 00000000 00100010     ................
  402a9c:	00100010 00000000 00000000 00100020     ............ ...
  402aac:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402abc:	00000000 000007e2 00000003 00000013     ................
  402acc:	0000000c 0000000f 0000002d 00000001     ........-.......
  402adc:	646e756d 0000006f                       mundo...

00402ae4 <_global_impure_ptr>:
  402ae4:	20400028                                (.@ 

00402ae8 <_init>:
  402ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402aea:	bf00      	nop
  402aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402aee:	bc08      	pop	{r3}
  402af0:	469e      	mov	lr, r3
  402af2:	4770      	bx	lr

00402af4 <__init_array_start>:
  402af4:	00401f59 	.word	0x00401f59

00402af8 <__frame_dummy_init_array_entry>:
  402af8:	00400165                                e.@.

00402afc <_fini>:
  402afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402afe:	bf00      	nop
  402b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b02:	bc08      	pop	{r3}
  402b04:	469e      	mov	lr, r3
  402b06:	4770      	bx	lr

00402b08 <__fini_array_start>:
  402b08:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 2078 0040 0e0a 7d20               ....x @... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <flag_rtt>:
20400020:	0001 0000 0000 0000                         ........

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	06f4 2040                                   ..@ 
